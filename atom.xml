<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qindamoni]]></title>
  <link href="http://qindamoni.com/atom.xml" rel="self"/>
  <link href="http://qindamoni.com/"/>
  <updated>2015-06-04T18:43:07+08:00</updated>
  <id>http://qindamoni.com/</id>
  <author>
    <name><![CDATA[Qindamoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Makefile语法]]></title>
    <link href="http://qindamoni.com/blog/2015/05/01/makefileyu-fa/"/>
    <updated>2015-05-01T20:05:54+08:00</updated>
    <id>http://qindamoni.com/blog/2015/05/01/makefileyu-fa</id>
    <content type="html"><![CDATA[<h3>基本结构</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">target</span> <span class="p">...</span> <span class="o">:</span> <span class="n">prerequisites</span> <span class="p">...</span>
</span><span class='line'>    <span class="n">command</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">target</span> <span class="p">...</span> <span class="o">:</span> <span class="n">prerequisites</span> <span class="p">...</span> <span class="p">;</span> <span class="n">command</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>target

<ul>
<li>要生成的目标，可以是下面任意一个，或下面组成的列表

<ul>
<li>具体的文件目标，如：main.o</li>
<li>最终的应用程序，如：app.exe</li>
<li>动态库，静态库。</li>
<li>伪目标，如：clean，install</li>
</ul>
</li>
</ul>
</li>
<li>prerequisites

<ul>
<li>生成target需要的依赖规则，可以是单个或者多个规则，可以是下面的任意一个，或列表

<ul>
<li>具体的文件，如：main.c，main.h</li>
<li>objectFile，如：main.o</li>
<li>动态库，静态库</li>
<li>伪目标，如：cleanone，cleantwo</li>
</ul>
</li>
</ul>
</li>
<li>command

<ul>
<li>生成target所执行的具体的命令。需要以tab开头。也可以与target同行，使用<code>;</code>号隔开。</li>
<li>command 是可执行的shell命令</li>
<li>只有当prerequisites中有一个以上文件的修改时间早于target的修改时间才会执行command指令。</li>
</ul>
</li>
</ul>


<!-- more -->


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">app</span><span class="p">.</span><span class="nl">exe</span> <span class="p">:</span> <span class="n">main</span><span class="p">.</span><span class="n">o</span> <span class="n">child</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>    <span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">app</span><span class="p">.</span><span class="n">exe</span> <span class="n">main</span><span class="p">.</span><span class="n">o</span> <span class="n">child</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="n">main</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">main</span><span class="p">.</span><span class="n">h</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>    <span class="n">cc</span> <span class="o">-</span><span class="n">c</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">child</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="n">h</span> <span class="n">child</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>    <span class="n">cc</span> <span class="o">-</span><span class="n">c</span> <span class="n">child</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="nl">clean</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">rm</span> <span class="o">*</span><span class="p">.</span><span class="n">o</span>
</span></code></pre></td></tr></table></div></figure>


<h3>执行流程</h3>

<ul>
<li>make 在当前目录下寻找<code>Makefile</code>或者<code>makefile</code>文件</li>
<li>从<code>Makefile</code>文件找到第一个target，即app.exe，作为默认target，也是最终生成的文件。</li>
<li>如果app.exe不存在，或者所依赖的main.o，child.o文件比app.exe新，那么就执行后面的command命令，重新生成app.exe。</li>
<li>如果main.o文件不存在，或者main.c，main.h修改时间早于main.o那么执行后面的command命令，重新生成main.o文件</li>
<li>main.c，main.h是我们的源文件，理论上是一定存在的。</li>
</ul>


<h4>Makefile如上所示，一步一步的解决依赖，最终生成目标文件。如main.h文件被修改，那么将重新生成main.o。而新的main.o文件又导致app.exe重新生成。</h4>

<h3>自动推导</h3>

<ul>
<li>Makefile中看到<code>.o</code>结尾的target时候，make会自动将.c文件添加到prerequisites依赖里面，并且也会自动推导出<code>cc -c xxx.c</code>命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">main</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span> <span class="n">main</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>    <span class="n">cc</span> <span class="o">-</span><span class="n">c</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>等价于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">main</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">main</span><span class="p">.</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>而且当多个.o目标都依赖于某一个.h文件时候可以合并编写</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">main</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">defs</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">child</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">defs</span><span class="p">.</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<p>等价于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">main</span><span class="p">.</span><span class="n">o</span> <span class="n">child</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="n">defs</span><span class="p">.</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当定义一个目标，且prerequisites为空时，make会自动推导出该目标是伪目标，并不是生成文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">clean</span><span class="p">:</span>
</span><span class='line'>    <span class="n">rm</span> <span class="o">*</span><span class="p">.</span><span class="n">o</span>
</span></code></pre></td></tr></table></div></figure>


<p>自动推导伪目标有隐患（当真的存在一个clean文件），所以最好使用<code>.PHONY</code>显示的定义伪目标</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="nl">PHONY</span> <span class="p">:</span> <span class="n">clean</span>
</span><span class='line'><span class="nl">clean</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">rm</span> <span class="o">*</span><span class="p">.</span><span class="n">o</span>
</span></code></pre></td></tr></table></div></figure>


<h3>变量</h3>

<h4>定义变量</h4>

<ul>
<li><code>value = val</code>

<ul>
<li>使用变量没有先后顺序</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">value1</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span>
</span><span class='line'><span class="n">value2</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 或者</span>
</span><span class='line'>
</span><span class='line'><span class="n">value2</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="n">value1</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>value := val</code>

<ul>
<li>变量使用之前必须定义</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 正确</span>
</span><span class='line'><span class="n">value2</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="nl">value1</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 错误</span>
</span><span class='line'><span class="nl">value1</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span>
</span><span class='line'><span class="n">value2</span> <span class="o">=</span> <span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>value ?= val</code>

<ul>
<li>如果变量value没有定义，那么赋值val</li>
</ul>
</li>
<li><code>value += val</code>

<ul>
<li>对变量value追加val</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">value</span> <span class="p">:</span><span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="p">.</span><span class="n">c</span> <span class="n">c</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="nl">value</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="n">d</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 等价于</span>
</span><span class='line'>
</span><span class='line'><span class="nl">value</span> <span class="p">:</span><span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="p">.</span><span class="n">c</span> <span class="n">c</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">value</span> <span class="o">+=</span> <span class="n">d</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用变量</h4>

<ul>
<li><code>$value</code>

<ul>
<li>不推荐</li>
</ul>
</li>
<li><code>$(value)</code>

<ul>
<li>推荐</li>
</ul>
</li>
<li><code>${value}</code>

<ul>
<li>推荐</li>
</ul>
</li>
</ul>


<h4>变量替换</h4>

<ul>
<li><code>$(val:a=b)</code></li>
<li>等价于</li>
<li><code>${val:a=b}</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">value1</span> <span class="p">:</span><span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="p">.</span><span class="n">c</span> <span class="n">c</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="nl">value2</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="nl">value1</span><span class="p">:.</span><span class="n">c</span> <span class="o">=</span> <span class="p">.</span><span class="n">o</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(value2) = a.o b.o c.o</span>
</span></code></pre></td></tr></table></div></figure>


<p>等价于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">value1</span> <span class="p">:</span><span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="p">.</span><span class="n">c</span> <span class="n">c</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="nl">value2</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="nl">value1</span><span class="p">:</span><span class="o">%</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="o">%</span><span class="p">.</span><span class="n">o</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(value2) = a.o b.o c.o</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">z</span>
</span><span class='line'><span class="nl">a</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(a) = z</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">z</span>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="n">u</span>
</span><span class='line'><span class="nl">a</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(a) = u</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">first_second</span> <span class="o">=</span> <span class="n">Hello</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">first</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">second</span>
</span><span class='line'><span class="n">all</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="n">a_</span><span class="err">$</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(all) = Hello</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ifdef</span> <span class="n">do_sort</span>
</span><span class='line'><span class="nl">func</span> <span class="p">:</span><span class="o">=</span> <span class="n">sort</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nl">func</span> <span class="p">:</span><span class="o">=</span> <span class="n">strip</span>
</span><span class='line'><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="nl">bar</span> <span class="p">:</span><span class="o">=</span> <span class="n">a</span> <span class="n">d</span> <span class="n">b</span> <span class="n">g</span> <span class="n">q</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="nl">foo</span> <span class="p">:</span><span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="n">bar</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(foo) = $(sort a d b g q c) 或者 $(strip a d b g q c)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>重写命令行变量</h4>

<ul>
<li><code>override value = val</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// makefile</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="n">abc</span>
</span><span class='line'><span class="nl">all</span><span class="p">:</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出abc</span>
</span><span class='line'><span class="err">$</span><span class="o">&gt;</span> <span class="n">make</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出123</span>
</span><span class='line'><span class="err">$</span><span class="o">&gt;</span> <span class="n">make</span> <span class="n">value</span><span class="o">=</span><span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// makefile</span>
</span><span class='line'><span class="n">override</span> <span class="n">value</span><span class="o">=</span><span class="n">abc</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出abc</span>
</span><span class='line'><span class="err">$</span><span class="o">&gt;</span> <span class="n">make</span> <span class="n">value</span><span class="o">=</span><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>


<h4>多行变量</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">defile</span> <span class="n">value</span>
</span><span class='line'><span class="n">abc</span>
</span><span class='line'><span class="mi">123</span>
</span><span class='line'><span class="n">endef</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $(value) = abc ; 123</span>
</span></code></pre></td></tr></table></div></figure>


<h4>环境变量</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span><span class="o">&gt;</span><span class="n">make</span> <span class="n">value</span><span class="o">=</span><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>


<p>makefile中定义环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">export</span> <span class="n">value</span><span class="o">=</span><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>


<h4>目标变量</h4>

<ul>
<li>理论上在makefile中定义的变量都是全局变量</li>
<li>单独给某个target定义的变量为目标变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="o">:</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">-</span><span class="n">assignment</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 或者</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">override</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">-</span><span class="n">assignment</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><target-assigenmet>与全局变量的定义相同</li>
<li>目标变量的值会覆盖全局变量的值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">all</span> <span class="p">:</span> <span class="n">value1</span><span class="o">=</span><span class="n">val1</span> <span class="n">value2</span><span class="o">?=</span><span class="n">val2</span> <span class="n">value3</span><span class="o">+=</span><span class="n">val3</span> <span class="nl">value4</span><span class="p">:</span><span class="o">=</span><span class="n">val4</span>
</span><span class='line'>
</span><span class='line'><span class="nl">all</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$</span><span class="p">(</span><span class="n">value1</span><span class="p">)</span>  <span class="c1">// val1</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span>  <span class="c1">// val2</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$</span><span class="p">(</span><span class="n">value3</span><span class="p">)</span>  <span class="c1">// val3</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$</span><span class="p">(</span><span class="n">value4</span><span class="p">)</span>  <span class="c1">// val4</span>
</span></code></pre></td></tr></table></div></figure>


<h4>内置多命令变量</h4>

<ul>
<li>$@ 表示多命令中被选中的那一个</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="nl">d</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">echo</span> <span class="err">$@</span>
</span></code></pre></td></tr></table></div></figure>


<h3>条件判断</h3>

<ul>
<li>相等判断</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="n">ifeq</span> <span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">),</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不相等判断</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="n">ifneq</span> <span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">),</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义判断</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ifdef</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>未定义判断</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ifndef</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">value2</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h3>几个全局变量</h3>

<ul>
<li><code>$(MAKE)</code>

<ul>
<li>make执行文件路径</li>
</ul>
</li>
<li><code>$(MAKELEVEL)</code>

<ul>
<li>makefile的嵌套层次</li>
</ul>
</li>
</ul>


<h3>屏蔽</h3>

<ul>
<li>命令之前添加<code>-</code>号，表示忽略错误，继续执行</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">all</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span><span class="n">rm</span> <span class="o">*</span><span class="p">.</span><span class="n">o</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>命令之前添加<code>@</code>号，表示不打印该命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 输出123</span>
</span><span class='line'><span class="nl">all</span><span class="p">:</span>
</span><span class='line'>    <span class="err">@</span><span class="n">echo</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出 echo 123</span>
</span><span class='line'><span class="c1">// 123</span>
</span><span class='line'><span class="nl">all</span><span class="p">:</span>
</span><span class='line'>    <span class="n">echo</span> <span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL 基础知识]]></title>
    <link href="http://qindamoni.com/blog/2015/04/14/opengl-ji-chu-zhi-shi/"/>
    <updated>2015-04-14T21:47:28+08:00</updated>
    <id>http://qindamoni.com/blog/2015/04/14/opengl-ji-chu-zhi-shi</id>
    <content type="html"><![CDATA[<p>本文基于OpenGL3.3版本编写</p>

<h2>数据类型</h2>

<ul>
<li>GLboolean</li>
<li>GLbyte</li>
<li>GLubyte</li>
<li>GLchar</li>
<li>GLshort</li>
<li>GLushort</li>
<li>GLhalf</li>
<li>GLint</li>
<li>GLuint</li>
<li>GLsizei</li>
<li>GLenum</li>
<li>GLfloat</li>
<li>GLclampf</li>
<li>GLbitfield</li>
<li>GLdouble</li>
<li>GLclampd</li>
<li>GLint64</li>
<li>GLuint64</li>
<li>GLsizeiptr</li>
<li>GLintptr</li>
<li>GLsync</li>
</ul>


<!-- more -->


<h2>管线对象相关函数</h2>

<ul>
<li>glCreateShader</li>
<li>glShaderSource</li>
<li>glCompileShader</li>
<li>glDeleteShader</li>
<li>glIsShader</li>
<li>glGetShaderiv</li>
<li>glGetShaderInfoLog</li>
<li>glGetShaderSource</li>
</ul>


<h3>glCreateShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">创建管线对象，只能创建</span><span class="n">shaderType</span><span class="err">的三种类型中的一个</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">shaderType</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">参数</span>
</span><span class='line'><span class="n">shaderType</span>
</span><span class='line'>    <span class="n">GL_VERTEX_SHADER</span>
</span><span class='line'>    <span class="n">GL_GEOMETRY_SHADER</span>
</span><span class='line'>    <span class="n">GL_FRAGMENT_SHADER</span>
</span><span class='line'>
</span><span class='line'><span class="err">返回</span>
</span><span class='line'>    <span class="err">非</span><span class="mi">0</span> <span class="o">:</span> <span class="err">创建的对象</span><span class="n">id</span>
</span><span class='line'>    <span class="mi">0</span>   <span class="o">:</span> <span class="err">错误</span>
</span><span class='line'>    <span class="nl">GL_INVALID_ENUM</span><span class="p">:</span><span class="err">错误的类型</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">verShader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_VERTEX_SHADER</span><span class="p">);</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">frgShader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_FRAGMENT_SHADER</span><span class="p">);</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">geoShader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_GEOMETRY_SHADER</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glShaderSource</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">设置管线对象的源代码</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glShaderSource</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">shader</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">**</span> <span class="n">string</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span><span class="o">*</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span>
</span><span class='line'>    <span class="err">管线对象</span>
</span><span class='line'><span class="n">count</span>
</span><span class='line'>    <span class="err">设置</span><span class="n">string</span><span class="err">和</span><span class="n">length</span><span class="err">对象的长度</span>
</span><span class='line'><span class="n">string</span>
</span><span class='line'>    <span class="err">包含源代码的数组指针</span>
</span><span class='line'><span class="n">length</span>
</span><span class='line'>    <span class="err">包含源代码长度的数组</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">verShader</span> <span class="o">=</span> <span class="n">glCreatShader</span><span class="p">(</span><span class="n">GL_VERTEX_SHADER</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="s">&quot;attribute vec4 vVertex;&quot;</span>
</span><span class='line'>    <span class="s">&quot;void main(void)&quot;</span>
</span><span class='line'>    <span class="s">&quot;{&quot;</span>
</span><span class='line'>        <span class="s">&quot;gl_Position = vVertex;&quot;</span>
</span><span class='line'>    <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">glShaderSource</span><span class="p">(</span><span class="n">verShader</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">verSrc</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">glCompileShader</span><span class="p">(</span><span class="n">verShader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glCompileShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">编译管线对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glCompileShader</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDeleteShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">删除管线对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glDeleteShader</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">shader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glIsShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">判断该对象是否是管线对象，如果已经</span><span class="n">glDeleteShader</span><span class="err">同样返回</span><span class="n">GLfalse</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLboolean</span> <span class="n">glIsShader</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetShaderiv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取管线对象相关参数，如错误信息等，管线对象必须已经创建</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLint</span> <span class="o">*</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span>
</span><span class='line'>    <span class="err">已经创建管线对象</span>
</span><span class='line'>
</span><span class='line'><span class="n">pname</span>
</span><span class='line'>    <span class="n">GL_SHADER_TYPE</span>
</span><span class='line'>        <span class="err">返回管线对象的类型，即</span> <span class="p">[</span><span class="n">GL_VERTEX_SHADER</span><span class="o">|</span><span class="n">GL_FRAGMENT_SHADER</span><span class="o">|</span><span class="n">GL_GEOMETRY_SHADER</span><span class="p">]</span>
</span><span class='line'>    <span class="n">GL_DELETE_STATUS</span>
</span><span class='line'>        <span class="err">如果已经删除返回</span> <span class="n">GL_TRUE</span>
</span><span class='line'>    <span class="n">GL_COMPILE_STATUS</span>
</span><span class='line'>        <span class="err">如果编译成功返回</span> <span class="n">GL_TRUE</span>
</span><span class='line'>    <span class="n">GL_INFO_LOG_LENGTH</span>
</span><span class='line'>        <span class="err">日志信息长度</span>
</span><span class='line'>    <span class="n">GL_SHADER_SOURCE_LENGTH</span>
</span><span class='line'>        <span class="err">设置的源字符串长度</span>
</span><span class='line'>
</span><span class='line'><span class="n">params</span>
</span><span class='line'>    <span class="err">结果将存入该变量</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLint</span><span class="o">*</span> <span class="n">statValue</span><span class="p">;</span>
</span><span class='line'><span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">verShader</span><span class="p">,</span><span class="n">GL_COMPILE_STATUS</span><span class="p">,</span><span class="n">statValue</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">statValue</span> <span class="o">==</span> <span class="n">GL_FLASE</span><span class="p">){</span>
</span><span class='line'>    <span class="n">glDeleteShader</span><span class="p">(</span><span class="n">verShader</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;管线编译失败&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetShaderInfoLog</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取管线对象日志信息</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetShaderInfoLog</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">maxLength</span><span class="p">,</span><span class="n">GLsize</span><span class="o">*</span> <span class="n">length</span><span class="p">,</span><span class="n">GLchar</span><span class="o">*</span> <span class="n">infoLog</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span>
</span><span class='line'>    <span class="err">已经创建的管线对象</span>
</span><span class='line'><span class="n">maxLength</span>
</span><span class='line'>    <span class="err">设置返回日志的最大长度</span>
</span><span class='line'><span class="n">length</span>
</span><span class='line'>    <span class="err">返回的信息长度</span>
</span><span class='line'><span class="n">infoLog</span>
</span><span class='line'>    <span class="err">具体的信息</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">statusValue</span><span class="p">;</span>
</span><span class='line'><span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">verShader</span><span class="p">,</span><span class="n">GL_COMPILET_STATUS</span><span class="p">,</span><span class="o">&amp;</span><span class="n">statusValue</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">statusValue</span> <span class="o">==</span> <span class="n">GL_FLASE</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GLint</span> <span class="n">maxLength</span><span class="p">;</span>
</span><span class='line'>    <span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">verShader</span><span class="p">,</span><span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span><span class="o">&amp;</span><span class="n">maxLength</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLsizei</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLchar</span><span class="o">*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">maxLength</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">glGetShaderInfoLog</span><span class="p">(</span><span class="n">verShader</span><span class="p">,</span><span class="n">maxLengh</span><span class="p">,</span><span class="o">&amp;</span><span class="n">length</span><span class="p">,</span><span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;length %d&quot;</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;info:%s&quot;</span><span class="p">,</span><span class="n">info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetShaderSource</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取设置管线对象的源字符串</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetShaderSource</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">bufSize</span><span class="p">,</span><span class="n">GLsizei</span><span class="o">*</span> <span class="n">legnth</span><span class="p">,</span><span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>管线程序对象相关函数</h2>

<ul>
<li>glCreateProgram</li>
<li>glLinkProgram</li>
<li>glUseProgram</li>
<li>glDeleteProgram</li>
<li>glValidateProgram</li>
<li>glIsProgram</li>
<li>glGetProgramiv</li>
</ul>


<h3>glCreateProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">创建程序对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">glCreateProgram</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">pro</span> <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 绑定编译过的管线对象</span>
</span><span class='line'><span class="n">glAttachShader</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">verShader</span><span class="p">);</span>
</span><span class='line'><span class="n">glAttachShader</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">frgShader</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 绑定输入属性位置</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;vertex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;texture&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;normal&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 链接程序</span>
</span><span class='line'><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">pro</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用程序对象</span>
</span><span class='line'><span class="n">glUseProgram</span><span class="p">(</span><span class="n">pro</span><span class="p">);</span>
</span><span class='line'><span class="c1">// .....</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除程序对象</span>
</span><span class='line'><span class="n">glDeleteProgram</span><span class="p">(</span><span class="n">pro</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glLinkProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">链接程序，如果之前绑定了</span><span class="p">[</span><span class="n">GL_VERTEX_SHADER</span><span class="o">|</span><span class="n">GL_FRAGMENT_SHADER</span><span class="o">|</span><span class="n">GL_GEOMETRY_SHADER</span><span class="p">]</span><span class="err">管线对象，那么该管线对象就会处理对应的过程。</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glLinkProgram</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glUserProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">使一个管线程序成为当前环境的处理程序</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glUserProgram</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDeleteProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">删除管线程序对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glDeleteProgram</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glValidateProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">是否可以将指定的程序设置为当前环境的激活程序，如果发生错误可以使用</span><span class="n">glGetProgramInfoLog</span><span class="err">方法查找错误原因</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">glValidateProgram</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glIsProgram</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">是否是有效的程序对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLboolean</span> <span class="n">glIsProgram</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">program</span>
</span><span class='line'>    <span class="err">对象名称</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetProgramiv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取程序对象信息</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLint</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">program</span>
</span><span class='line'>    <span class="err">程序对象</span>
</span><span class='line'><span class="n">pname</span>
</span><span class='line'>    <span class="n">GL_DELETE_STATUS</span>
</span><span class='line'>        <span class="err">对象已删除返回</span> <span class="n">GL_TRUE</span>
</span><span class='line'>    <span class="n">GL_LINK_STATUS</span>
</span><span class='line'>        <span class="err">对象成功链接返回</span> <span class="n">GL_TRUE</span>
</span><span class='line'>    <span class="n">GL_VALIDATE_STATUS</span>
</span><span class='line'>        <span class="err">对后一个操作成功返回</span> <span class="n">GL_TRUE</span>
</span><span class='line'>    <span class="n">GL_INFO_LOG_LENGTH</span>
</span><span class='line'>        <span class="err">日志信息长度</span>
</span><span class='line'>    <span class="n">GL_ATTACHED_SHADERS</span>
</span><span class='line'>        <span class="err">绑定的管线对象数量</span>
</span><span class='line'>    <span class="n">GL_ACTIVE_ATTRIBUTES</span>
</span><span class='line'>        <span class="err">返回已经激活的有效的属性数量</span>
</span><span class='line'>    <span class="n">GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</span>
</span><span class='line'>        <span class="err">返回支持的最大的属性数量</span>
</span><span class='line'>    <span class="n">GL_ACTIVE_UNIFORMS</span>
</span><span class='line'>        <span class="err">返回已经激活的有效的统一值</span>
</span><span class='line'>    <span class="n">GL_ACTIVE_UNIFORM_MAX_LENGTH</span>
</span><span class='line'>        <span class="err">返回支持的最大统一值数量</span>
</span><span class='line'>    <span class="n">GL_TRANSFORM_FEEDBACK_BUFFER_MODE</span>
</span><span class='line'>    <span class="n">GL_TRANSFORM_FEEDBACK_VARYINGS</span>
</span><span class='line'>    <span class="n">GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</span>
</span><span class='line'>    <span class="n">GL_GEOMETRY_VERTICES_OUT</span>
</span><span class='line'>    <span class="n">GL_GEOMETRY_INPUT_TYPE</span>
</span><span class='line'>    <span class="n">GL_GEOMETRY_OUTPUT_TYPE</span>
</span><span class='line'><span class="n">params</span>
</span><span class='line'>    <span class="err">结果存入该变量</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetProgramInfoLog</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取管线程序日志信息，错误等</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">maxLength</span><span class="p">,</span><span class="n">GLsizei</span> <span class="o">*</span><span class="n">length</span><span class="p">,</span><span class="n">GLchar</span> <span class="o">*</span><span class="n">infoLog</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">program</span>
</span><span class='line'>    <span class="err">程序对象</span>
</span><span class='line'><span class="n">maxLength</span>
</span><span class='line'>    <span class="err">指定获取信息的最大长度</span>
</span><span class='line'><span class="n">length</span>
</span><span class='line'>    <span class="err">返回信息长度</span>
</span><span class='line'><span class="n">infoLog</span>
</span><span class='line'>    <span class="err">返回信息内容</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">pro</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLint</span> <span class="n">statusValue</span><span class="p">;</span>
</span><span class='line'><span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">GL_LINK_STATUS</span><span class="p">,</span><span class="o">&amp;</span><span class="n">statusValue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">statusValue</span> <span class="o">==</span> <span class="n">GL_FALSE</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GLint</span> <span class="n">maxLength</span><span class="p">;</span>
</span><span class='line'>    <span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span><span class="o">&amp;</span><span class="n">maxLength</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLsizei</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLchar</span><span class="o">*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">maxLength</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">maxLength</span><span class="p">,</span><span class="o">&amp;</span><span class="n">length</span><span class="p">,</span><span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;length:%d&quot;</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;info:%s&quot;</span><span class="p">,</span><span class="n">info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>管线对象与管线程序绑定</h2>

<ul>
<li>glAttachShader</li>
<li>glDetachShader</li>
</ul>


<h3>glAttachShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">将管线对象绑定到程序对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glAttachShader</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">shader</span>   <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_VERTEX_SHADER</span><span class="p">);</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">pro</span>      <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">glAttachShader</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">shader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDetachShader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">解除绑定</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glDetachShader</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">shader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>属性相关函数</h2>

<ul>
<li>glBindAttribLocation</li>
<li>glGetAttribLocation</li>
<li>glVertexAttrib*</li>
<li>glGetVertexAttrib*</li>
<li>glVertexAttribPointer</li>
<li>glGetVertexAttribPointer</li>
</ul>


<h3>glBindAttribLocation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">绑定着色器源代码中定义的属性变量</span> <span class="err">与</span> <span class="err">客户端程序中属性索引位置</span>
</span><span class='line'><span class="err">调用</span><span class="n">glLinkProgram</span><span class="err">后生效绑定</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">program</span>
</span><span class='line'>    <span class="err">程序对象</span>
</span><span class='line'><span class="n">index</span>
</span><span class='line'>    <span class="err">索引位置</span>
</span><span class='line'><span class="n">name</span>
</span><span class='line'>    <span class="err">着色器源代码中的变量名称</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">verShader</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="s">&quot;attribute vec4 vertex;&quot;</span>
</span><span class='line'>    <span class="s">&quot;attribute vec4 color;&quot;</span>
</span><span class='line'>    <span class="s">&quot;attribute vec4 normal;&quot;</span>
</span><span class='line'>    <span class="s">&quot;void main(void)&quot;</span>
</span><span class='line'>    <span class="s">&quot;{&quot;</span>
</span><span class='line'>        <span class="s">&quot;gl_Position = vVertex;&quot;</span>
</span><span class='line'>    <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">shader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_VERTEX_SHADER</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glShaderSource</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">verShader</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">glCompileShader</span><span class="p">(</span><span class="n">shader</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">pro</span>  <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
</span><span class='line'><span class="n">glAttachShader</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="n">shader</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;vertex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;texture&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;normal&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">pro</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetAttribLocation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">根据变量名称获取</span><span class="n">glGetAttribLocation</span><span class="err">设置的索引位置，如果没有找到返回</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">program</span><span class="p">,</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="c1">// ....接上一个例子</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">vertexIndex</span>   <span class="o">=</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="s">&quot;vertex&quot;</span><span class="p">);</span>        <span class="c1">// 0</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">textrueIndex</span>  <span class="o">=</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="s">&quot;texture&quot;</span><span class="p">);</span>       <span class="c1">// 1</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">normalIndex</span>   <span class="o">=</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="s">&quot;normal&quot;</span><span class="p">);</span>        <span class="c1">// 2</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">unknownIndex</span>  <span class="o">=</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="s">&quot;unknown&quot;</span><span class="p">);</span>       <span class="c1">// -1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glVertexAttrib*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">绑定一个固定值到</span><span class="n">glBindAttibLocation</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="s">&quot;name&quot;</span><span class="p">)</span><span class="err">中的</span><span class="n">index</span><span class="err">指定的管线变量中，只能设定一个值，一般用于多个顶点公用一个数据时候使用。如多个顶点都是同一个颜色。</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glVertexAttrib1f</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLfloat</span>   <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib1s</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLshort</span>   <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib1d</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLdouble</span>  <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI1i</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="n">GLint</span>     <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI1ui</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="n">GLuint</span>    <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2f</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLfloat</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2s</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLshort</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2d</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLdouble</span>  <span class="n">v0</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI2i</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="n">GLint</span>     <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI2ui</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="n">GLuint</span>    <span class="n">v0</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3f</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLfloat</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v1</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3s</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLshort</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v1</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3d</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLdouble</span>  <span class="n">v0</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI3i</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="n">GLint</span>     <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v1</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI3ui</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="n">GLuint</span>    <span class="n">v0</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v1</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4f</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLfloat</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v1</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v2</span><span class="p">,</span><span class="n">GLfloat</span>  <span class="n">v3</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4s</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLshort</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v1</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v2</span><span class="p">,</span><span class="n">GLshort</span>  <span class="n">v3</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4d</span><span class="p">(</span><span class="n">GLuint</span>    <span class="n">index</span><span class="p">,</span><span class="n">GLdouble</span>  <span class="n">v0</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v2</span><span class="p">,</span><span class="n">GLdouble</span> <span class="n">v3</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nub</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="n">GLubyte</span>   <span class="n">v0</span><span class="p">,</span><span class="n">GLubyte</span>  <span class="n">v1</span><span class="p">,</span><span class="n">GLubyte</span>  <span class="n">v2</span><span class="p">,</span><span class="n">GLubyte</span>  <span class="n">v3</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4i</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="n">GLint</span>     <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v1</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v2</span><span class="p">,</span><span class="n">GLint</span>    <span class="n">v3</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4ui</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="n">GLuint</span>    <span class="n">v0</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v1</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v2</span><span class="p">,</span><span class="n">GLuint</span>   <span class="n">v3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib1fv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib1sv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib1dv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLdouble</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI1iv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI1uiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2fv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2sv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib2dv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLdouble</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI2iv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI2uiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3fv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3sv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib3dv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLdouble</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI3iv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI3uiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4fv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4sv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4dv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLdouble</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4iv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4bv</span><span class="p">(</span><span class="n">GLuint</span>   <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLbyte</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4ubv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLubyte</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4usv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLushort</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4uiv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nbv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLbyte</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nsv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Niv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nubv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLubyte</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nusv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLushort</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttrib4Nuiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4bv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLbyte</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4ubv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLubyte</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4sv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLshort</span>     <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4usv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLushort</span>    <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4iv</span><span class="p">(</span><span class="n">GLuint</span>  <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span>       <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribI4uiv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span>      <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribP1ui</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">normalized</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribP2ui</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">normalized</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribP3ui</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">normalized</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glVertexAttribP4ui</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">normalized</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;color&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glVertexAttrib3f</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">0.f</span><span class="p">,</span><span class="mf">0.f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">verShader</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'><span class="n">out</span> <span class="n">vec4</span> <span class="n">oColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">oColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fagShader</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec</span> <span class="n">oColor</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">oColor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetVertexAttrib*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取</span><span class="n">glVertextAttrib</span><span class="err">设置的值</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glVertexAttribPointer</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">主要做两件事</span>
</span><span class='line'><span class="mi">1</span><span class="err">，对上一个</span><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">)</span><span class="err">中的数据进行说明，如多长一组，下一组偏移量，起始偏移量</span>
</span><span class='line'><span class="mi">2</span><span class="err">，对上一个</span><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArray</span><span class="p">)</span><span class="err">的数据进行绑定，将上一个</span><span class="n">ARRAY_BUFFER</span><span class="err">绑定到里面。绑定之后即可使用</span><span class="n">vertextArray</span><span class="err">了。</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLint</span> <span class="n">size</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">normalized</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">stride</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span><span class="o">*</span> <span class="n">pointer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span>
</span><span class='line'>    <span class="err">创建程序对象使用</span><span class="n">glBindAttibLocation</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="s">&quot;name&quot;</span><span class="p">)</span><span class="err">中的</span><span class="n">index</span>
</span><span class='line'><span class="n">size</span>
</span><span class='line'>    <span class="err">一组由几个单元组成</span>
</span><span class='line'><span class="n">type</span>
</span><span class='line'>    <span class="err">每个单元的类型</span>
</span><span class='line'>    <span class="n">GL_BYTE</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_BYTE</span>
</span><span class='line'>    <span class="n">GL_SHORT</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_SHORT</span>
</span><span class='line'>    <span class="n">GL_INT</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT</span>
</span><span class='line'>    <span class="n">GL_HALF_FLOAT</span>
</span><span class='line'>    <span class="n">GL_FLOAT</span>
</span><span class='line'>    <span class="n">GL_DOUBLE</span>
</span><span class='line'>    <span class="n">GL_INT_2_10_10_10_REV</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT_2_10_10_10_REV</span>
</span><span class='line'><span class="n">normalized</span>
</span><span class='line'>    <span class="err">是否将进行整型数据转换成浮点型。如：将</span><span class="n">GL_BTYE</span><span class="err">类型的</span><span class="mi">256</span><span class="err">长度的整型转换到</span><span class="mi">0</span><span class="err">～</span><span class="mi">1</span><span class="err">浮点空间中。</span>
</span><span class='line'>    <span class="err">转换规则：实际长度</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="err">整型长度</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="err">例如：</span><span class="n">GL_BTYPE</span> <span class="err">类型的</span> <span class="mi">4</span>  <span class="o">=&gt;</span> <span class="n">GL_FLOAT</span> <span class="mi">4</span><span class="o">/</span><span class="mi">255</span>
</span><span class='line'><span class="n">stride</span>
</span><span class='line'>    <span class="err">两个单元之间的偏移量，单位</span><span class="n">btye</span>
</span><span class='line'>    <span class="err">数据结构图示</span><span class="p">(</span><span class="n">GLfloat</span><span class="p">)</span><span class="err">：</span><span class="n">x</span><span class="o">|</span><span class="n">y</span><span class="o">|</span><span class="n">z</span><span class="o">|</span><span class="n">w</span> <span class="o">|</span> <span class="n">r</span><span class="o">|</span><span class="n">g</span><span class="o">|</span><span class="n">b</span><span class="o">|</span><span class="n">a</span> <span class="o">|</span> <span class="n">x</span><span class="o">|</span><span class="n">y</span><span class="o">|</span><span class="n">z</span><span class="o">|</span><span class="n">w</span> <span class="o">|</span> <span class="n">r</span><span class="o">|</span><span class="n">g</span><span class="o">|</span><span class="n">b</span><span class="o">|</span><span class="n">a</span>
</span><span class='line'>    <span class="err">那么如果该</span><span class="n">index</span><span class="err">位置顶点数据，那么偏移量就是</span><span class="k">sizeof</span><span class="p">(</span><span class="n">GLfload</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class='line'><span class="n">pointer</span>
</span><span class='line'>    <span class="err">数据开始的偏移量</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">VAO</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">Buffer</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLfloat</span> <span class="n">point1</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0.1f</span><span class="p">,</span><span class="mf">0.1f</span><span class="p">,</span><span class="mf">0.1f</span><span class="p">....};</span>
</span><span class='line'><span class="n">GLfloat</span> <span class="n">point2</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0.1f</span><span class="p">,</span><span class="mf">0.1f</span><span class="p">,</span><span class="mf">0.1f</span><span class="p">....};</span>
</span><span class='line'>
</span><span class='line'><span class="n">glGenVertexArrays</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">VAO</span><span class="p">);</span>
</span><span class='line'><span class="n">glGenBuffer</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">Buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第一组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAO</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">Buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">piont1</span><span class="p">),</span><span class="n">point1</span><span class="p">,</span><span class="n">GL_DYNAMIC_DRAW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">GL_FLASE</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">glEnableVertexArray</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第二组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAO</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">Buffer</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">piont2</span><span class="p">),</span><span class="n">point1</span><span class="p">,</span><span class="n">GL_DYNAMIC_DRAW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">GL_FLASE</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">glEnableVertexArray</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span><span class="p">(</span><span class="err">条件</span><span class="p">){</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="c1">// 画第一个</span>
</span><span class='line'>        <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAO</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c1">// 画第二个</span>
</span><span class='line'>        <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAO</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetVertexAttribPointer</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取绑定到指定索引位置的缓存数据</span><span class="p">(</span><span class="n">ARRAY_BUFFER</span><span class="err">数据</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetVertexAttribPointerv</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLvoid</span><span class="o">**</span> <span class="n">pointer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span>
</span><span class='line'>    <span class="err">索引位置</span>
</span><span class='line'><span class="n">pname</span>
</span><span class='line'>    <span class="err">只能是</span><span class="n">GL_VERTEX_ATTRIB_ARRAY_POINTER</span>
</span><span class='line'><span class="n">pointer</span>
</span><span class='line'>    <span class="n">GL_ARRAY_BUFFER</span><span class="err">中绑定的缓存数据</span>
</span></code></pre></td></tr></table></div></figure>


<h2>顶点数据对象相关函数</h2>

<ul>
<li>glGenVertexArrays</li>
<li>glBindVertexArray</li>
<li>glDeleteVertexArrays</li>
<li>glIsVertexArray</li>
<li>glEnableVertexAttribArray</li>
<li>glDisableVertexAttribArray</li>
</ul>


<h3>glGenVertexArrays</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">创建顶点数据对象名称</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGenVertexArrays</span><span class="p">(</span><span class="n">GLsizei</span> <span class="n">n</span><span class="p">,</span><span class="n">GLuint</span><span class="o">*</span> <span class="n">arrays</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">vertextArr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenVertexArray</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">vertexArr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glBindVertexArray</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">绑定顶点数据对象到当前环境。之后就可以使用</span><span class="n">glVertexAttribPointer</span><span class="err">进行内容绑定。</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span>
</span><span class='line'>    <span class="err">必须是</span><span class="n">glGenVertexArrays</span><span class="err">返回的有效对象名称</span>
</span><span class='line'>    <span class="err">如果之前没有绑定过，那么第一绑定时候会自动生成定点数据对象</span>
</span><span class='line'>    <span class="err">如果之前绑定过，那么可以使用绑定的数据，或者重新绑定覆盖原先的内容</span>
</span><span class='line'>    <span class="err">如果是</span> <span class="mi">0</span> <span class="err">那么取消所有顶点数据对象的绑定</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">vertexAtrr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenVertexArray</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">vertexArr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDeleteVertexArrays</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">删除之间定义的</span><span class="n">vertexArray</span><span class="err">，删除之后可以再次创建并绑定</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glDeleteVertexArrays</span><span class="p">(</span><span class="n">GLsizei</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span><span class="o">*</span> <span class="n">arrays</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span>
</span><span class='line'>    <span class="err">定义删除的对象数量</span>
</span><span class='line'><span class="n">arrays</span>
</span><span class='line'>    <span class="err">要删除的顶点对象首地址</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glIsVertexArray</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">判断某个对象是否是对象数据对象</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glIsVertexArray</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glEnableVertexAttribArray</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">启用</span><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="n">name</span><span class="p">)</span><span class="err">的</span><span class="n">index</span><span class="err">对应的属性值，默认情况所有</span><span class="n">index</span><span class="err">对应的属性是停用的状态，需要启用才能把数据传给着色器</span>
</span><span class='line'><span class="err">并且必须在</span><span class="n">glBindVertexArray</span> <span class="err">绑定之后，开启对应的属性</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span>
</span><span class='line'>    <span class="n">glBindAttribLocation</span><span class="err">绑定的</span><span class="n">index</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="c1">// verShader</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">vertex1</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">vertex2</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">vertex3</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">vertex4</span>
</span><span class='line'><span class="n">in</span> <span class="n">vec4</span> <span class="n">vertex5</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// program</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;vertex1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;vertex2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;vertex3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;vertex4&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindAttribLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s">&quot;vertex5&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">vertexAtrr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenVertexArray</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">vertexArr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第一组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第二组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第三组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第四组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第五组</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">normalize</span><span class="p">,</span><span class="n">strid</span><span class="p">,</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用的时候开启一个顶点数据环境，画一个顶点数据</span>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRAGILE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRAGILE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRAGILE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vertexArr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="n">glDrawArray</span><span class="p">(</span><span class="n">GL_TRAGILE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDisableVertexAttribArray</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">关闭指定</span><span class="n">vertextArray</span>
</span></code></pre></td></tr></table></div></figure>


<h2>统一值相关函数</h2>

<ul>
<li>glGetUniformLocation</li>
<li>glUniform*</li>
<li>glGetUniform*</li>
<li>glGetActiveUniform</li>
</ul>


<h3>glGetUniformLocation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取着色器中定义的统一值的索引位置，必须在</span><span class="n">link</span><span class="err">之后才能使用</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">program</span><span class="p">,</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">返回</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span> <span class="err">表示没有找到</span><span class="n">name</span><span class="err">对应的统一值</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="c1">// verShader</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">vec4</span> <span class="n">myColor</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'><span class="n">GLint</span> <span class="n">myColorIndex</span> <span class="o">=</span> <span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="s">&quot;myColor&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glUserProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'><span class="n">glUniform4f</span><span class="p">(</span><span class="n">myColorIndex</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glUniform*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">设置统一值，第一个参数是</span><span class="n">glGetUniformLocation</span><span class="err">返回的</span><span class="n">index</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glUniform1f</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform2f</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform3f</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform4f</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v2</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">v3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform1i</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v0</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform2i</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform3i</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform4i</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v0</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v1</span><span class="p">,</span><span class="n">GLint</span> <span class="n">v2</span><span class="p">,</span><span class="n">GLint3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform1fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform2fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform3fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform4fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform1iv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform2iv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform3iv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform4iv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform1uiv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform2uiv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform3uiv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniform4uiv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="k">const</span> <span class="n">GLuint</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix2fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix3fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix4fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix2x3fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix3x2fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix2x4fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix4x2fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix3x4fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glUniformMatrix4x3fv</span><span class="p">(</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">count</span><span class="p">,</span><span class="n">GLboolean</span> <span class="n">transpose</span><span class="p">,</span><span class="k">const</span> <span class="n">GLfloat</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="c1">// 设置统一值数组</span>
</span><span class='line'><span class="c1">// vecShader</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">vec4</span> <span class="n">myColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLfloat</span> <span class="n">myColor</span> <span class="o">=</span> <span class="p">{</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">};</span>
</span><span class='line'><span class="n">glUserProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'><span class="n">glUniform4fv</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">mColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// vecShader</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">vec5</span> <span class="n">myColor</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLfloat</span> <span class="n">myColor</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">,</span><span class="mf">1.f</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">glUserProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'><span class="n">glUniform4fv</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">myColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetUniform*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">获取</span><span class="n">glUniform</span><span class="o">*</span><span class="err">设置的统一值的具体值</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetUniformfv</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">program</span><span class="p">,</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfloat</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glGetUniformiv</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">program</span><span class="p">,</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLint</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glGetUniformiuv</span><span class="p">(</span><span class="n">GLunit</span> <span class="n">program</span><span class="p">,</span><span class="n">GLint</span> <span class="n">location</span><span class="p">,</span><span class="n">GLfuint</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">glUniform4fv</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">myColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLfloat</span><span class="o">*</span> <span class="n">params</span><span class="p">;</span>
</span><span class='line'><span class="n">glGetUniformfv</span><span class="p">(</span><span class="n">program</span><span class="p">,</span><span class="n">index</span><span class="p">,</span><span class="n">params</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glGetActiveUniform</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGetActiveUniform</span><span class="p">(</span><span class="n">GLuint</span>      <span class="n">program</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLuint</span>      <span class="n">index</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLsizei</span>     <span class="n">bufSize</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLsizei</span> <span class="o">*</span>   <span class="n">length</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLint</span> <span class="o">*</span>     <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLenum</span> <span class="o">*</span>    <span class="n">type</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">GLchar</span> <span class="o">*</span>    <span class="n">name</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>纹理对象相关函数</h2>

<ul>
<li>glGenTextrues</li>
<li>glBindTextrue</li>
<li>glActiveTextrue</li>
<li>glIsTextrue</li>
<li>glDeleteTextures</li>
<li>glTexImage*</li>
<li>glTexSubImage</li>
<li>glCopyTexImage*</li>
<li>glCopyTexSubImage*</li>
<li>glGetTexImage</li>
<li>glPixelStore*</li>
<li>glCompressedTexImage*</li>
<li>glCompressedTexSubImage*</li>
</ul>


<h3>glGenTextrues</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">创建纹理对象名称</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glGenTextures</span><span class="p">(</span><span class="n">GLsizei</span> <span class="n">n</span><span class="p">,</span><span class="n">GLuint</span><span class="o">*</span> <span class="n">textures</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">textures</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLfloat</span> <span class="n">imageData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mf">1.0f</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">,</span>     <span class="c1">// R</span>
</span><span class='line'>    <span class="mf">0.0f</span><span class="p">,</span><span class="mf">1.0f</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">,</span>     <span class="c1">// G</span>
</span><span class='line'>    <span class="mf">0.0f</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">,</span><span class="mf">1.0f</span>      <span class="c1">// B</span>
</span><span class='line'>    <span class="mf">1.0f</span><span class="p">,</span><span class="mf">1.0f</span><span class="p">,</span><span class="mf">0.0f</span>      <span class="c1">// RG</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RGB</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RGB</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">imageData</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glBindTexture</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">绑定纹理对象，对象名称为</span><span class="n">glGenTextures</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">textures</span><span class="p">)</span><span class="err">中的</span><span class="n">textures</span><span class="err">中一个成员。如果是</span><span class="mi">0</span><span class="err">则晴空当前绑定。</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLuint</span> <span class="n">texture</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_1D</span>
</span><span class='line'>        <span class="err">一维纹理对象</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D</span>
</span><span class='line'>        <span class="err">二维纹理对象</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_3D</span>
</span><span class='line'>        <span class="err">三位纹理对象</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_1D_ARRAY</span>
</span><span class='line'>        <span class="err">一维纹理对象数组</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D_ARRAY</span>
</span><span class='line'>        <span class="err">二维纹理对象数组</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D_MULTISAMPLE</span>
</span><span class='line'>        <span class="err">二维多重采样纹理数组</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</span>
</span><span class='line'>        <span class="err">二维多重采样纹理对象数组</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_RECTANGLE</span>
</span><span class='line'>        <span class="mi">2</span><span class="n">D</span><span class="err">矩形纹理对象</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_BUFFER</span>
</span><span class='line'>        <span class="mi">1</span><span class="n">D</span><span class="err">缓存纹理对象</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP</span>
</span><span class='line'>        <span class="mi">3</span><span class="n">D</span><span class="err">映射纹理对象</span>
</span><span class='line'>
</span><span class='line'><span class="n">texture</span>
</span><span class='line'>    <span class="n">glGenTextures</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">textures</span><span class="p">)</span> <span class="err">生成的</span><span class="n">textures</span><span class="err">中一个</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">textures</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenTextures</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">textures</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第一组，绑定到GL_TEXUTRE_1D</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_1D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">GLubyte</span> <span class="n">imageData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">64</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">128</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">256</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">glTexImage1D</span><span class="p">(</span><span class="n">GL_TEXTURE_1D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_R8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RED</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">imageData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第二组，绑定到GL_TEXUTRE_2D</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">GLubyte</span> <span class="n">imageData2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">256</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">128</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">64</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">32</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_1D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_R8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RED</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">imageData2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 画第一组</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_1D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// ... 与第一组纹理相关的顶点数组，包括位置，纹理坐标等</span>
</span><span class='line'><span class="n">glDrawArrays</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 画第二组</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// ... 与第二组纹理相关的顶点数组，包括位置，纹理坐标等</span>
</span><span class='line'><span class="n">glDrawArrays</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glActiveTextrue</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="n">opengl</span> <span class="err">支持多个纹理单元，不指定默认是</span><span class="n">GL_TEXTURE0</span><span class="err">，每个版本实现不同</span><span class="mf">3.3</span><span class="err">最少有</span><span class="mi">48</span><span class="err">个，即</span><span class="n">GL_TEXTURE48</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">可以这样理解：</span>
</span><span class='line'><span class="err">显卡准备了</span><span class="mi">48</span><span class="err">个大箱子，每个大箱子的名字是</span><span class="n">GL_TEXTURE0</span><span class="err">，</span><span class="n">GL_TEXTURE1</span><span class="err">，</span><span class="n">GL_TEXTURE2</span><span class="p">....</span><span class="err">，</span>
</span><span class='line'><span class="err">使用</span><span class="n">glActiveTextrue</span><span class="p">(</span><span class="n">GL_TEXTURE38</span><span class="p">)</span><span class="err">选择使用哪个大箱子</span>
</span><span class='line'>
</span><span class='line'><span class="err">每个大箱子里面有几个小箱子，每个小箱子的名字是</span><span class="n">GL_TEXUTRE_1D</span><span class="err">，</span><span class="n">GL_TEXUTRE_2D</span><span class="err">，</span><span class="n">GL_TEXUTRE_3D</span><span class="p">....</span>
</span><span class='line'><span class="err">使用</span><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_1D</span><span class="p">)</span><span class="err">选择使用哪个小箱子</span>
</span><span class='line'>
</span><span class='line'><span class="err">最后使用</span><span class="n">glTexImage</span><span class="err">等方法往小箱子里面添加数据</span>
</span><span class='line'><span class="err">使用</span><span class="n">glTexImage</span><span class="o">*</span><span class="err">方法给每个小箱子里面添加数据</span>
</span><span class='line'><span class="err">使用</span><span class="n">glTexSubImage</span><span class="o">*</span><span class="err">方法给每个小箱子里面的某个位置添加数据</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">texture</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="n">glGenTextures</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">textures</span><span class="p">);</span>
</span><span class='line'><span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE1</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// frgShader</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">smaple2d</span> <span class="n">texture</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">texture2d</span><span class="p">(</span><span class="n">texture</span><span class="p">,</span><span class="n">tver</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLint</span> <span class="n">location</span> <span class="o">=</span> <span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">pro</span><span class="p">,</span><span class="err">&#39;</span><span class="n">texture</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用GL_TEXUTRE0</span>
</span><span class='line'><span class="n">glUniform1i</span><span class="p">(</span><span class="n">location</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">glDrawArrays</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用GL_TEXTURE1</span>
</span><span class='line'><span class="n">glUniform1i</span><span class="p">(</span><span class="n">location</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">glDrawArrays</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glIsTextrue</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">判断是否是可用的</span><span class="n">texture</span><span class="err">，如果没有</span><span class="n">glBindTexure</span><span class="err">，或者已经被</span><span class="n">glDeleteTexture</span><span class="err">都会返回</span><span class="n">GL_FALSE</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="n">GLboolean</span> <span class="n">glIsTexture</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">texture</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glDeleteTexutres</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">删除纹理</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glDeleteTextures</span><span class="p">(</span><span class="n">GLsizei</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">GLunit</span> <span class="o">*</span> <span class="n">textures</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glTexImage*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">拷贝数据到</span><span class="n">glBindTexture</span><span class="err">绑定的环境中</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glTexImage1D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">internalFormat</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLint</span> <span class="n">border</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glTexImage2D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">internalFormat</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">height</span><span class="p">,</span><span class="n">GLint</span> <span class="n">border</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glTexImage3D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">internalFormat</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">height</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">depth</span><span class="p">,</span><span class="n">GLint</span> <span class="n">border</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_1D</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_1D</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_2D</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_1D_ARRAY</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_1D_ARRAY</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_RECTANGLE</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_RECTANGLE</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_POSITIVE_X</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_CUBE_MAP</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GL_TEXTURE_3D</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_3D</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D_ARRAY</span>
</span><span class='line'>    <span class="n">GL_PROXY_TEXTURE_2D_ARRAY</span>
</span><span class='line'>
</span><span class='line'><span class="n">level</span>
</span><span class='line'>    <span class="n">mipmap</span><span class="err">中的层级，默认是</span><span class="mi">0</span><span class="err">是原始大图</span>
</span><span class='line'>
</span><span class='line'><span class="n">internalFormat</span>
</span><span class='line'>    <span class="n">data</span> <span class="err">中的纹理格式，即是纹理的数据类型</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_RED</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_RG</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_RGB</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_RGBA</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_SRGB</span>
</span><span class='line'>    <span class="n">GL_COMPRESSED_SRGB_ALPHA</span>
</span><span class='line'>    <span class="n">GL_DEPTH_COMPONENT</span>
</span><span class='line'>    <span class="n">GL_DEPTH_COMPONENT16</span>
</span><span class='line'>    <span class="n">GL_DEPTH_COMPONENT24</span>
</span><span class='line'>    <span class="n">GL_DEPTH_COMPONENT32</span>
</span><span class='line'>    <span class="n">GL_R3_G3_B2</span>
</span><span class='line'>    <span class="n">GL_RED</span>
</span><span class='line'>    <span class="n">GL_RG</span>
</span><span class='line'>    <span class="n">GL_RGB</span>
</span><span class='line'>    <span class="n">GL_RGB4</span>
</span><span class='line'>    <span class="n">GL_RGB5</span>
</span><span class='line'>    <span class="n">GL_RGB8</span>
</span><span class='line'>    <span class="n">GL_RGB10</span>
</span><span class='line'>    <span class="n">GL_RGB12</span>
</span><span class='line'>    <span class="n">GL_RGB16</span>
</span><span class='line'>    <span class="n">GL_RGBA</span>
</span><span class='line'>    <span class="n">GL_RGBA2</span>
</span><span class='line'>    <span class="n">GL_RGBA4</span>
</span><span class='line'>    <span class="n">GL_RGB5_A1</span>
</span><span class='line'>    <span class="n">GL_RGBA8</span>
</span><span class='line'>    <span class="n">GL_RGB10_A2</span>
</span><span class='line'>    <span class="n">GL_RGBA12</span>
</span><span class='line'>    <span class="n">GL_RGBA16</span>
</span><span class='line'>    <span class="n">GL_SRGB</span>
</span><span class='line'>    <span class="n">GL_SRGB8</span>
</span><span class='line'>    <span class="n">GL_SRGB_ALPHA</span>
</span><span class='line'>    <span class="n">GL_SRGB8_ALPHA8</span>
</span><span class='line'>
</span><span class='line'><span class="n">width</span>
</span><span class='line'>    <span class="err">一维纹理的长度</span>
</span><span class='line'>    <span class="err">二维纹理的宽度</span>
</span><span class='line'>    <span class="err">三维纹理的</span><span class="n">x</span><span class="err">轴</span>
</span><span class='line'>
</span><span class='line'><span class="n">height</span>
</span><span class='line'>    <span class="err">二维纹理的高度</span>
</span><span class='line'>    <span class="err">三维纹理的</span><span class="n">y</span><span class="err">轴</span>
</span><span class='line'>
</span><span class='line'><span class="n">depth</span>
</span><span class='line'>    <span class="err">三维纹理的</span><span class="n">z</span><span class="err">轴</span>
</span><span class='line'>
</span><span class='line'><span class="n">border</span>
</span><span class='line'>    <span class="err">边框宽度，一般都是</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">format</span>
</span><span class='line'>    <span class="err">需要转换成的数据纹理格式，显卡中使用的格式</span>
</span><span class='line'>    <span class="n">GL_RED</span>
</span><span class='line'>    <span class="n">GL_RG</span>
</span><span class='line'>    <span class="n">GL_RGB</span>
</span><span class='line'>    <span class="n">GL_BGR</span>
</span><span class='line'>    <span class="n">GL_RGBA</span>
</span><span class='line'>    <span class="n">GL_BGRA</span>
</span><span class='line'><span class="n">type</span>
</span><span class='line'>    <span class="err">需要转换成的数据类型，显卡中使用的格式</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_BYTE</span>
</span><span class='line'>    <span class="n">GL_BYTE</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_SHORT</span>
</span><span class='line'>    <span class="n">GL_SHORT</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT</span>
</span><span class='line'>    <span class="n">GL_INT</span>
</span><span class='line'>    <span class="n">GL_FLOAT</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_BYTE_3_3_2</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_BYTE_2_3_3_REV</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT_8_8_8_8_REV</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT_10_10_10_2</span>
</span><span class='line'>    <span class="n">GL_UNSIGNED_INT_2_10_10_10_REV</span>
</span><span class='line'><span class="n">data</span>
</span><span class='line'>    <span class="err">具体的纹理数据指针，如果定义了缓存</span><span class="n">GL_PIXEL_UNPACK_BUFFER</span><span class="err">的话，</span><span class="n">data</span><span class="err">表示缓存中的开始位置偏移量，不在表示纹理数据指针</span>
</span><span class='line'>
</span><span class='line'><span class="err">例子</span>
</span><span class='line'><span class="c1">// 使用纹理指针</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">GLubyte</span> <span class="n">imageData2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">256</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">128</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">64</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">32</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_1D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_R8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RED</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">imageData2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用GL_UNPACK_PIXEL_BUFFER</span>
</span><span class='line'><span class="n">GLubyte</span> <span class="n">imageData2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">256</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">128</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">64</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">32</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLunit</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">glGenBuffer</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_UNPACK_PIXEL_BUFFER</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_UNPACK_PIXEL_BUFFER</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">imageData2</span><span class="p">),</span><span class="n">imageData</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="n">GL_FLASE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXUTRE_2D</span><span class="p">,</span><span class="n">textures</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_1D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_R8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">GL_RED</span><span class="p">,</span><span class="n">GL_FLOAT</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glTexSubImage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">用于更新部分数据到</span><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">texutre</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="err">中的环境中</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glTexSubImage1D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">xoffset</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glTexSubImage2D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">xoffset</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">height</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glTexSubImage3D</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLint</span> <span class="n">level</span><span class="p">,</span><span class="n">GLint</span> <span class="n">xoffset</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">width</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">height</span><span class="p">,</span><span class="n">GLsizei</span> <span class="n">depth</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">format</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">type</span><span class="p">,</span><span class="k">const</span> <span class="n">GLvoid</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glCopyTexImage*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">将帧缓存中的纹理数据保存到</span><span class="n">glBindTexutre</span><span class="err">绑定的环境中</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glCopyTexSubImage*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">将帧缓存中的部分纹理数据保存到</span><span class="n">glBindTexutre</span><span class="err">绑定的环境中</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glPixelStore*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">设置纹理数据相关配置</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glPixelStoref</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glPixelStorei</span><span class="p">(</span> <span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLint</span> <span class="n">param</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">pname</span>
</span><span class='line'>    <span class="n">GL_PACK_SWAP_BYTES</span>
</span><span class='line'>    <span class="n">GL_PACK_LSB_FIRST</span>
</span><span class='line'>    <span class="n">GL_PACK_ROW_LENGTH</span>
</span><span class='line'>    <span class="n">GL_PACK_IMAGE_HEIGHT</span>
</span><span class='line'>    <span class="n">GL_PACK_SKIP_PIXELS</span>
</span><span class='line'>    <span class="n">GL_PACK_SKIP_ROWS</span>
</span><span class='line'>    <span class="n">GL_PACK_SKIP_IMAGES</span>
</span><span class='line'>    <span class="n">GL_PACK_ALIGNMENT</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GL_UNPACK_SWAP_BYTES</span>
</span><span class='line'>    <span class="n">GL_UNPACK_LSB_FIRST</span>
</span><span class='line'>    <span class="n">GL_UNPACK_ROW_LENGTH</span>
</span><span class='line'>    <span class="n">GL_UNPACK_IMAGE_HEIGHT</span>
</span><span class='line'>    <span class="n">GL_UNPACK_SKIP_PIXELS</span>
</span><span class='line'><span class="n">param</span>
</span><span class='line'>    <span class="err">具体的值</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glTexParameter</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">设置纹理参数</span>
</span><span class='line'>
</span><span class='line'><span class="err">原型</span>
</span><span class='line'><span class="kt">void</span> <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLfloat</span> <span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">glTexParameteri</span><span class="p">(</span><span class="n">GLenum</span> <span class="n">target</span><span class="p">,</span><span class="n">GLenum</span> <span class="n">pname</span><span class="p">,</span><span class="n">GLint</span> <span class="n">param</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_1D</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_3DGL_TEXTURE_1D_ARRAY</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_2D_ARRAY</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_RECTANGLE</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_CUBE_MAP</span>
</span><span class='line'><span class="n">pname</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_BASE_LEVEL</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_COMPARE_FUNC</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_COMPARE_MODE</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_LOD_BIAS</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_MIN_FILTER</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_MAG_FILTER</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_MIN_LOD</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_MAX_LOD</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_MAX_LEVEL</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_SWIZZLE_R</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_SWIZZLE_G</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_SWIZZLE_B</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_SWIZZLE_A</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_WRAP_S</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_WRAP_T</span>
</span><span class='line'>    <span class="n">GL_TEXTURE_WRAP_R</span>
</span><span class='line'><span class="n">param</span>
</span><span class='line'>    <span class="err">具体的值</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glCompressedTexImage*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">压缩纹理格式，与</span><span class="n">glTexImage</span><span class="o">*</span><span class="err">对应，只是第三个参数</span><span class="n">internalformat</span><span class="err">必须是压缩格式</span>
</span></code></pre></td></tr></table></div></figure>


<h3>glCompressedTexSubImage*</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">说明</span>
</span><span class='line'><span class="err">压缩纹理格式，与</span><span class="n">glTexISubmage</span><span class="o">*</span><span class="err">对应，只是第三个参数</span><span class="n">internalformat</span><span class="err">必须是压缩格式</span>
</span></code></pre></td></tr></table></div></figure>


<h2>缓存对象相关函数</h2>

<ul>
<li>glGenBuffers</li>
<li>glBindBuffer</li>
<li>glBufferData</li>
<li>glBufferSubData</li>
<li>glGetBufferSubData</li>
<li>glIsBuffer</li>
<li>glDeleteBuffers</li>
<li>glMapBuffer</li>
<li>glUnmapBuffer</li>
<li>glMapBufferRange</li>
<li>glBindBufferBase</li>
<li>glBindBufferRange</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++备忘]]></title>
    <link href="http://qindamoni.com/blog/2015/04/02/c-plus-plus-bei-wang/"/>
    <updated>2015-04-02T18:15:36+08:00</updated>
    <id>http://qindamoni.com/blog/2015/04/02/c-plus-plus-bei-wang</id>
    <content type="html"><![CDATA[<ul>
<li>指针定义之后必须初始化，而且必须使用同类型变量的地址初始化（即不能使用字面值常量初始化）

<ul>
<li>定义之后未初始化的指针内容不确定</li>
</ul>
</li>
<li>指针内存结构</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">value</span>   <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">point</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="kt">int</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span>   <span class="mh">0x00000001</span>      <span class="mi">1</span>
</span><span class='line'>        <span class="p">....</span>
</span><span class='line'>        <span class="p">....</span>
</span><span class='line'><span class="n">point</span>   <span class="mh">0x00001001</span>      <span class="mh">0x00000001</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>两种方式访问内存数据

<ul>
<li>变量名称</li>
<li>变量内存地址，即指针</li>
</ul>
</li>
<li>基本数据类型访问</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">value</span>   <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">point</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 访问</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">*</span><span class="n">point</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>结构体数据类型访问</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Human</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Human</span> <span class="n">man</span><span class="p">;</span>
</span><span class='line'><span class="n">man</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Human</span><span class="o">*</span> <span class="n">pMan</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">man</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 访问</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">man</span><span class="p">.</span><span class="n">age</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">pMan</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,(</span><span class="o">*</span><span class="n">pMan</span><span class="p">).</span><span class="n">age</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>两种常量表达式

<ul>
<li><code>#define MAX 1000</code>

<ul>
<li>编译阶段就会替换</li>
</ul>
</li>
<li><code>const int MAX 1000</code>

<ul>
<li>调试阶段可以跟踪</li>
</ul>
</li>
<li>程序中尽量不要使用 字面值 常量，而替换成上面种的有意义的常量</li>
</ul>
</li>
<li>三元运算符

<ul>
<li><code>c = ( a &lt; b ) ? a : b</code></li>
</ul>
</li>
<li>复合赋值符

<ul>
<li><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>|=</code></li>
</ul>
</li>
<li>相等 <code>==</code> 不要进行浮点数比较</li>
<li>逻辑运算符

<ul>
<li><code>&amp;&amp;</code> <code>!</code> <code>||</code></li>
</ul>
</li>
<li>switch 语句</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">switch</span><span class="p">(</span><span class="err">只能是整型，或能转换成整型的其他类型</span><span class="p">){</span>
</span><span class='line'>    <span class="k">case</span> <span class="err">只能是常量，或常量表达式，不能有任何变量</span><span class="o">:</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数声明</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">返回类型</span> <span class="err">函数名称</span><span class="p">(</span><span class="err">形参列表</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数定义</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">返回类型</span> <span class="err">函数名称</span><span class="p">(</span><span class="err">形参列表</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">函数体</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>调用一个函数之前必须声明该函数</li>
<li>函数调用，形参赋值

<ul>
<li>传值，传地址，传引用

<ul>
<li>不管传什么，函数调用时候刑参都是在内存栈中新创建的变量，有自己的内存空间（即内存地址）</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2015</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">param</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 内存结构</span>
</span><span class='line'><span class="n">num</span>     <span class="mh">0x0001</span>  <span class="mi">2015</span>
</span><span class='line'>        <span class="p">....</span>
</span><span class='line'>        <span class="p">....</span>
</span><span class='line'><span class="n">param</span>   <span class="mh">0x0010</span>  <span class="mi">2015</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span>     <span class="o">=</span> <span class="mi">2015</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">pNum</span>   <span class="o">=</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span><span class="p">(</span><span class="n">pNum</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">param</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 内存结构</span>
</span><span class='line'><span class="n">num</span>     <span class="mh">0x0001</span>  <span class="mi">2015</span>
</span><span class='line'><span class="n">pNum</span>    <span class="mh">0x0004</span>  <span class="mh">0x0001</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'><span class="n">param</span>   <span class="mh">0x0010</span>  <span class="mh">0x0001</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数内部的变量在开始调用函数时候进行内存分配，调用结束之后会全部释放。

<ul>
<li>只有函数内部使用new申请堆内存创建对象不会释放，需要用户手动释放</li>
<li>return 通过传值将数据传出去</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 内存结构</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 开始调用</span>
</span><span class='line'><span class="n">x</span>   <span class="mh">0x0001</span>  <span class="mi">0</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="n">a</span>   <span class="mh">0x0004</span>  <span class="mi">1</span>
</span><span class='line'><span class="n">b</span>   <span class="mh">0x0008</span>  <span class="mi">2</span>
</span><span class='line'><span class="n">c</span>   <span class="mh">0x000b</span>  <span class="mi">3</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用结束</span>
</span><span class='line'><span class="n">x</span>   <span class="mh">0x0001</span>  <span class="mi">3</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数调用表达式可以用在任何该返回值类型对应的地方</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">isFinished</span><span class="p">()</span> <span class="o">==</span> <span class="nb">true</span> <span class="p">){</span>
</span><span class='line'>    <span class="c1">// ....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>内连函数，编译阶段直接在调用的位置替换为函数定义的代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 编译后</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数重载</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span><span class="kt">float</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类声明</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="err">类名: </span><span class="nc">public</span> <span class="err">基类名</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// 公有</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// 保护</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// 私有</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类定义，其实就是定义类的成员函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">say</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 定义</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Hello</span><span class="o">::</span><span class="n">say</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>声明对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">say</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// 声明对象</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">hello</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 声明对象指针</span>
</span><span class='line'>    <span class="n">Hello</span><span class="o">*</span> <span class="n">pHello</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 申请内存创建（堆）</span>
</span><span class='line'>    <span class="n">Hello</span><span class="o">*</span> <span class="n">nHello</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用对象

<ul>
<li>如果对象是指针使用 <code>-&gt;</code></li>
<li>如果对象是值使用 <code>.</code></li>
<li>这两个操作跟具体类没有任何关系，类也没有这两种用法</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">hello</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hello</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1,声明的是对象指针，使用其他同类型的对象地址初始化</span>
</span><span class='line'>    <span class="n">Hello</span><span class="o">*</span> <span class="n">pHello</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hello</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pHello</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2,声明的是对象指针，使用new申请地址进行初始化</span>
</span><span class='line'>    <span class="n">Hello</span><span class="o">*</span> <span class="n">pHello2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="p">();</span>
</span><span class='line'>    <span class="n">pHello2</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 指针转换成具体值使用</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">pHello</span><span class="p">).</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">pHello2</span><span class="p">).</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接声明的对象的内存由系统控制</li>
<li>new出来的对象的内存需要用户自己控制，所以使用完之后要delete</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Hello</span><span class="o">*</span> <span class="n">pHello</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">delete</span> <span class="n">pHello</span><span class="p">;</span>
</span><span class='line'><span class="n">pHello</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类的构造函数，用类名定义</li>
<li>如果没有定义构造函数，系统自动提供一个没有参数的空构造函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不能在定义类的时候初始化类成员变量，应该在构造函数中初始化成员变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 编译报warnning</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tag</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// 声明方式1</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 声明方式2</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Hello</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 声明方式3</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化函数列表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="o">:</span> <span class="n">age</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">tag</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 等同于</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>拷贝构造函数

<ul>
<li>如果不定义，系统默认提供一个拷贝构造函数</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="err">类名</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="err">类名</span><span class="p">(</span><span class="err">类名</span> <span class="o">&amp;</span><span class="err">对象</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span><span class="p">(</span><span class="k">const</span> <span class="n">Hello</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用方法，拷贝一分</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">b</span> <span class="o">=</span> <span class="n">Hello</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对象操作符重载

<ul>
<li><code>a+b</code> 等价与 <code>a.operator+(b)</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="err">类名</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="err">返回类型</span> <span class="n">operater</span> <span class="err">操作符</span><span class="p">(</span><span class="err">参数列表</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">Hello</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Hello</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">+</span> <span class="n">b</span><span class="p">.</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>友元函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">friend</span> <span class="kt">void</span> <span class="n">myFriendFunc</span><span class="p">(</span><span class="n">Hello</span> <span class="o">&amp;</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">myFriendFunc</span><span class="p">(</span><span class="n">Hello</span> <span class="o">&amp;</span><span class="n">hello</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hello</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hello</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 编译错误</span>
</span><span class='line'>    <span class="c1">// a.age = 1;</span>
</span><span class='line'>    <span class="c1">// a.tag = 2;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myFriendFunc</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>友元类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">friend</span> <span class="k">class</span> <span class="nc">A</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="n">Hello</span> <span class="o">&amp;</span><span class="n">hello</span><span class="p">){</span>
</span><span class='line'>        <span class="n">hello</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">hello</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Hello</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 编译错误</span>
</span><span class='line'>    <span class="c1">// a.age = 1;</span>
</span><span class='line'>    <span class="c1">// a.tag = 2;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">A</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>友元状态不会被子类继承</p></li>
<li><p>类继承</p>

<ul>
<li>继承方式

<ul>
<li>public

<ul>
<li>与基类访问控制相同</li>
</ul>
</li>
<li>protected

<ul>
<li>基类的public成员变成自己的protected成员</li>
</ul>
</li>
<li>private

<ul>
<li>基类的public成员变成自己的private成员</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="err">类名: 继承方式 基类1,继承方式 基类2,.....</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>声明子类的对象，会自动调用父类的无参数构造方法，在调用自己的构造方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Parent</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;123&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span><span class="o">:</span><span class="k">public</span> <span class="n">Parent</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Child</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>虚函数，只有在基类里面将成员函数定义为虚函数，才能够在子类重写</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">get</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">get</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类的静态成员变量

<ul>
<li>静态成员变量并不属于某个具体的对象，是属于所有程序的。</li>
<li>使用之前必须进行初始化，而且只能在全局环境中进行初始化

<ul>
<li>不能在类内部</li>
<li>不能函数内部</li>
<li>静态常量除外</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// 编译错误，age 没有初始化，即还没有内存空间</span>
</span><span class='line'>        <span class="c1">//age = 123;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 编译错误，必须在全局环境初始化</span>
</span><span class='line'>        <span class="c1">// int A::age = 123;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">get</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// 编译错误，age 没有初始化，即还没有内存空间</span>
</span><span class='line'>        <span class="c1">//age = 123;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 编译错误，必须在全局环境初始化</span>
</span><span class='line'>        <span class="c1">// int A::age = 123;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 静态常量可以初始化</span>
</span><span class='line'>    <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">tag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正确，成功获得内存地址并初始化</span>
</span><span class='line'><span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">age</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// 编译错误，age 没有初始化，即还没有内存空间</span>
</span><span class='line'>    <span class="c1">// A::age = 123;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 编译错误，必须在全局环境初始化</span>
</span><span class='line'>    <span class="c1">// int A::age = 123;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>this 指针，在定义成员函数时候使用this指针代表当前对象的地址，成功定义对象之后系统将对象地址赋给this指针

<ul>
<li>如果在成员函数内部直接调用成员变量，系统会默认添加this指针</li>
<li>类静态方法中不能使用this方法，也就是不能使用非静态的类成员变量</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Hello</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 等用与</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="nf">sGet</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// 编译错误</span>
</span><span class='line'>        <span class="c1">// return age;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 等同于</span>
</span><span class='line'>        <span class="c1">// 编译错误</span>
</span><span class='line'>        <span class="c1">// return age;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 正确</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 等同于</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Hello</span><span class="o">::</span><span class="n">tag</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Hello</span><span class="o">::</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指针运算

<ul>
<li>指针加法等同于当前地址向后位移该类型长度的位置</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span><span class="n">b</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span><span class="n">b</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>数组

<ul>
<li>数组名字就是指针，指向第一个元素的地址，使用 <code>*</code> 可以获取具体内容</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过指针遍历数组</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">start</span>  <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">end</span>    <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 等价</span>
</span><span class='line'>    <span class="c1">// int* end    = &amp;a[3];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 开始遍历</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">start</span> <span class="o">!=</span> <span class="n">end</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">start</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 移动指针位置</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>void 指针

<ul>
<li>void 另一种用法是用于修饰函数返回值和无参数的函数刑参列表</li>
<li>不同类型的类型的指针互相转换需要强行转换</li>
<li>任何其他指针可以不经过转化就可以赋给void指针</li>
<li>void指针赋给其他类型的指针要进行强行转换</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">pInt</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span><span class="o">*</span> <span class="n">pFloat</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">pVoid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 需要强行转换</span>
</span><span class='line'>    <span class="n">pInt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">pFloat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 直接赋值</span>
</span><span class='line'>    <span class="n">pVoid</span> <span class="o">=</span> <span class="n">pInt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pVoid</span> <span class="o">=</span> <span class="n">pFloat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 需要强行转换</span>
</span><span class='line'>    <span class="n">pInt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">pVoid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pFloat</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span><span class="n">pVoid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新的c++强转符号 <code>static_cast</code>

<ul>
<li><code>static_cast&lt;数据类型&gt;(数据)</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">pInt</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span><span class="o">*</span> <span class="n">pFloat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// C 写法</span>
</span><span class='line'>    <span class="n">pInt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">pFloat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// c++ 写法</span>
</span><span class='line'>    <span class="n">pInt</span> <span class="o">=</span> <span class="n">static_case</span><span class="o">&lt;</span><span class="kt">int</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">pFloat</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指针的指针</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span>     <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span>    <span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">**</span>   <span class="n">c</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 内存结构</span>
</span><span class='line'><span class="n">a</span>   <span class="mh">0x0001</span>  <span class="mi">1</span>
</span><span class='line'><span class="n">b</span>   <span class="mh">0x0004</span>  <span class="mh">0x0001</span>
</span><span class='line'><span class="n">c</span>   <span class="mh">0x0008</span>  <span class="mh">0x0004</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一般用户多维数组，数组成员也是指针的情况</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">names</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;qindamoni&quot;</span><span class="p">,</span><span class="s">&quot;amuri&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指针做为函数参数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">SumArray</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">pArray</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nArrayCount</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">nSum</span> <span class="p">){</span>
</span><span class='line'>    <span class="o">*</span><span class="n">nSum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nArrayCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span>  <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 将结果保存到nArraySum中，传出结果        </span>
</span><span class='line'>        <span class="o">*</span><span class="n">nSum</span> <span class="o">+=</span> <span class="o">*</span><span class="n">pArray</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 指针加运算，访问数组中的下一个元素     </span>
</span><span class='line'>        <span class="n">pArray</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指针做为函数返回值

<ul>
<li>不能把一个指向局部变量的指针返回</li>
<li>可以返回new出来的变量</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">get</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span>   <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">b</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 错误，因为函数执行完之后会系统会释放变量a</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">get</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 正确，因为new的变量的内存由用户自行控制</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>引用</p>

<ul>
<li>就是变量的别名，操作引用等同与操作该变量</li>
<li>引用必须声明时候就初始化</li>
<li>引用一旦定义就不能在修改</li>
</ul>
</li>
<li><p>函数参数尽量使用引用</p>

<ul>
<li>传值效率低，每次拷贝的是具体的数据，如果数据大，会很慢且浪费</li>
<li>传指针不安全</li>
</ul>
</li>
<li><p>命名空间</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">namespace</span> <span class="err">空间名</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 空间内的声明和定义</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">Space1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">Space2</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Space1</span><span class="o">::</span><span class="n">A</span> <span class="n">a1</span><span class="p">;</span>
</span><span class='line'><span class="n">Space2</span><span class="o">::</span><span class="n">A</span> <span class="n">a2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>一般情况下没有使用<code>::</code>表示全局命名空间，也就是匿名空间，使用空调<code>::</code>可以显示的制定匿名空间</p></li>
<li><p>作用域</p>

<ul>
<li>局部作用域

<ul>
<li> <code>{}</code> 内部定义的变量和函数</li>
<li>从变量定义开始到 <code>{}</code> 结束</li>
</ul>
</li>
<li>全局作用域

<ul>
<li>不再任何 <code>{}</code> 里定义的变量</li>
<li>从当前cpp文件中 定义变量开始到文件结束</li>
</ul>
</li>
<li>如果要在文件A中使用文件B中定义的变量和方法

<ul>
<li>需要在A中重新使用extren声明B文件中的变量和方法

<ul>
<li>编译器就自动从其他文件（B）中寻找该变量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>typeof</p>

<ul>
<li>定义指针变量</li>
<li>定义函数指针</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 错误</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 正确</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span><span class="o">*</span><span class="n">b</span><span class="p">,</span><span class="o">*</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正确</span>
</span><span class='line'><span class="n">typeof</span> <span class="o">*</span><span class="kt">int</span> <span class="n">PINT</span><span class="p">;</span>
</span><span class='line'><span class="n">PINT</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 函数指针</span>
</span><span class='line'><span class="n">typeof</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">FUNC</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">FUNC</span> <span class="n">func1</span><span class="p">,</span><span class="n">func2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>const</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 整型常量，必须初始化</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 对象常量</span>
</span><span class='line'><span class="k">const</span> <span class="n">CLASS</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 整型常量指针，即*a不能变，a能变</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 等同于</span>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 常量整型指针，即*a能变，a不能变</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 各种不能变</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 常量引用，a不能变</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>STL 标准模版库 = 算法 ＋ 容器 ＋ 迭代器</p></li>
<li><p>函数模版</p>

<ul>
<li><code>标示符</code> 就是将要被替换的类型</li>
<li>调用函数模版时候 <code>标示符</code> 会自动替换对应的类型</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="err">标示符</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">返回值类型</span> <span class="err">函数名称</span><span class="p">(</span><span class="err">刑参列表</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">函数体</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">T</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="nl">a</span> <span class="p">:</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// max 中T将自动替换为int</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>函数模版原理</p>

<ul>
<li>在编译阶段，编译第一碰到T为int时候生成一个int版本的函数，并替换后生成的代码放到模版后面。</li>
</ul>
</li>
<li><p>类模版</p>

<ul>
<li>typename 可以用class代替</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="err">标示符</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="err">类名</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">类定义</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">sum</span><span class="p">(</span><span class="n">T</span> <span class="n">c</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="n">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">T</span> <span class="n">A</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">A</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>类模版原理</p>

<ul>
<li>与函数模版原理相似。系统会自动声明替换后的代码</li>
<li>如果模版文件和声明不再统一文件，可以使用显示声明</li>
</ul>
</li>
<li><p>类模版实践</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">emplate</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ActionContainer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">ActionContainer</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">redoPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">undoPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">add</span> <span class="p">(</span><span class="n">T</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="nf">redo</span><span class="p">();</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">undo</span><span class="p">();</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">redoPos</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">undoPos</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">SIZE</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="n">redoAction</span><span class="p">[</span><span class="n">SIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">undoAction</span><span class="p">[</span><span class="n">SIZE</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">ActionContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">add</span><span class="p">(</span><span class="n">T</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">undoPos</span> <span class="o">&gt;=</span> <span class="n">SIZE</span><span class="p">){</span>
</span><span class='line'>        <span class="n">undoPos</span> <span class="o">=</span> <span class="n">SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">SIZE</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">undoAction</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">undoAction</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">undoAction</span><span class="p">[</span><span class="n">undoPos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">ActionContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">undo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">redoAction</span><span class="p">[</span><span class="n">redoPos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">undoAction</span><span class="p">[</span><span class="o">--</span><span class="n">undoPos</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">undoAction</span><span class="p">[</span><span class="n">undoPos</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">ActionContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">redo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">undoAction</span><span class="p">[</span><span class="n">undoPos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">redoAction</span><span class="p">[</span><span class="o">--</span><span class="n">redoPos</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">redoAction</span><span class="p">[</span><span class="n">redoPos</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">ActionContainer</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">action</span><span class="p">;</span>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nUndo</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">undo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">nUndo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nUndo</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">undo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">nUndo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nRedo</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">redo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">nRedo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nRedo</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">redo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">nRedo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d源码分析]]></title>
    <link href="http://qindamoni.com/blog/2015/04/01/cocos2dyuan-ma-fen-xi/"/>
    <updated>2015-04-01T19:35:01+08:00</updated>
    <id>http://qindamoni.com/blog/2015/04/01/cocos2dyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<ul>
<li>本文是基于cocosd2x 3.4 mac工程进行解析

<ul>
<li>文档编写时cocos2dx最新版本为3.4finnal，本文基于该版本</li>
<li>mac 工程的openGL渲染部分是基于开源 GLFW 编写的，方便查阅</li>
</ul>
</li>
</ul>


<h3>程序总入口main函数</h3>

<figure class='code'><figcaption><span>main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AppDelegate</span> <span class="n">app</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Application</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义AppDelegate对象</li>
<li>自动调用父类构造函数Application()方法</li>
<li>将自己（app对象）赋给类静态变量sm_pSharedApplication</li>
<li>this 是app对象的指针，并不是对象本身</li>
</ul>


<figure class='code'><figcaption><span>CCApplication-mac.mm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Application</span><span class="o">::</span><span class="n">Application</span><span class="p">()</span><span class="o">:</span> <span class="n">_animationInterval</span><span class="p">(</span><span class="mf">1.0f</span><span class="o">/</span><span class="mf">60.0f</span><span class="o">*</span><span class="mf">1000.0f</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="o">!</span> <span class="n">sm_pSharedApplication</span><span class="p">,</span> <span class="s">&quot;sm_pSharedApplication already exist&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sm_pSharedApplication</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过getInstance()方法获取刚刚定义的app对象</li>
</ul>


<figure class='code'><figcaption><span>CCApplication-mac.mm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Application</span><span class="o">*</span> <span class="n">Application</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">sm_pSharedApplication</span><span class="p">,</span> <span class="s">&quot;sm_pSharedApplication not set&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sm_pSharedApplication</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>Application对象run()方法</h3>

<figure class='code'><figcaption><span>CCApplication-mac.mm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">Application</span><span class="o">::</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">initGLContextAttrs</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">applicationDidFinishLaunching</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">long</span> <span class="n">lastTime</span> <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">curTime</span> <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">glview</span> <span class="o">=</span> <span class="n">director</span><span class="o">-&gt;</span><span class="n">getOpenGLView</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glview</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">glview</span><span class="o">-&gt;</span><span class="n">windowShouldClose</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lastTime</span> <span class="o">=</span> <span class="n">getCurrentMillSecond</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">mainLoop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">glview</span><span class="o">-&gt;</span><span class="n">pollEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">curTime</span> <span class="o">=</span> <span class="n">getCurrentMillSecond</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">curTime</span> <span class="o">-</span> <span class="n">lastTime</span> <span class="o">&lt;</span> <span class="n">_animationInterval</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">usleep</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">useconds_t</span><span class="o">&gt;</span><span class="p">((</span><span class="n">_animationInterval</span> <span class="o">-</span> <span class="n">curTime</span> <span class="o">+</span> <span class="n">lastTime</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">glview</span><span class="o">-&gt;</span><span class="n">isOpenGLReady</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">mainLoop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glview</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>initGLContextAttrs 属于钩子方法，方便用户自行在AppDelegate设定</li>
<li>初始化openGL的颜色，深度，模版缓存值</li>
</ul>


<figure class='code'><figcaption><span>AppDelegate.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">AppDelegate</span><span class="o">::</span><span class="n">initGLContextAttrs</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">GLContextAttrs</span> <span class="n">glContextAttrs</span> <span class="o">=</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">8</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLView</span><span class="o">::</span><span class="n">setGLContextAttrs</span><span class="p">(</span><span class="n">glContextAttrs</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>CCGLView.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">GLContextAttrs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">redBits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">greenBits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">blueBits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">alphaBits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">depthBits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">stencilBits</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>_glContextAttrs 变量会在 GLViewImpl::create 初始化openGL时候使用</li>
</ul>


<figure class='code'><figcaption><span>CCGLView.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">GLView</span><span class="o">::</span><span class="n">setGLContextAttrs</span><span class="p">(</span><span class="n">GLContextAttrs</span><span class="o">&amp;</span> <span class="n">glContextAttrs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_glContextAttrs</span> <span class="o">=</span> <span class="n">glContextAttrs</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用户入口</h3>

<ul>
<li>AppDelegate文件为用户的入口文件，用户初始配置都可以在该文件进行</li>
<li>applicationDidFinishLaunching() 方法为从用户角度的第一个入口方法</li>
<li>一般情况下用户不会修改cocos2dx的底层框架</li>
</ul>


<figure class='code'><figcaption><span>AppDelegate.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">bool</span> <span class="n">AppDelegate</span><span class="o">::</span><span class="n">applicationDidFinishLaunching</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 初始化Director</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">director</span>   <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">glview</span>     <span class="o">=</span> <span class="n">director</span><span class="o">-&gt;</span><span class="n">getOpenGLView</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">glview</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 初始化GLView</span>
</span><span class='line'>        <span class="n">glview</span> <span class="o">=</span> <span class="n">GLViewImpl</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;My Game&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">setOpenGLView</span><span class="p">(</span><span class="n">glview</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">setDisplayStats</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">setAnimationInterval</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="mi">60</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">createScene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">runWithScene</span><span class="p">(</span><span class="n">scene</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>因为第一次调用Director::getInstance()，所以Director会初始化静态变量s_SharedDirector</li>
<li>从此之后的getInstance调用都是返回的第一次初始化的s_SharedDirector</li>
</ul>


<figure class='code'><figcaption><span>CCDirector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Director</span><span class="o">*</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s_SharedDirector</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">s_SharedDirector</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">DisplayLinkDirector</span><span class="p">();</span>
</span><span class='line'>        <span class="n">CCASSERT</span><span class="p">(</span><span class="n">s_SharedDirector</span><span class="p">,</span> <span class="s">&quot;FATAL: Not enough memory&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">s_SharedDirector</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">s_SharedDirector</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">Director</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 主要设置两个值，__projection 投影方式，Texture2D::g_defaultAlphaPixelFormat 纹理渲染方式</span>
</span><span class='line'>    <span class="n">setDefaultValues</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 当前执行的场景</span>
</span><span class='line'>    <span class="n">_runningScene</span>       <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 下一个执行的场景</span>
</span><span class='line'>    <span class="n">_nextScene</span>          <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_notificationNode</span>   <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 场景堆栈</span>
</span><span class='line'>    <span class="n">_scenesStack</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// FPS信息初始化</span>
</span><span class='line'>    <span class="n">_accumDt</span>            <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_frameRate</span>          <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_FPSLabel</span>           <span class="o">=</span> <span class="n">_drawnBatchesLabel</span> <span class="o">=</span> <span class="n">_drawnVerticesLabel</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_totalFrames</span>        <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_lastUpdate</span>         <span class="o">=</span> <span class="k">new</span> <span class="k">struct</span> <span class="n">timeval</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_secondsPerFrame</span>    <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 导演是否暂停</span>
</span><span class='line'>    <span class="n">_paused</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 导演是否下个循环清除</span>
</span><span class='line'>    <span class="n">_purgeDirectorInNextLoop</span>    <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 导演是否下个循环重启</span>
</span><span class='line'>    <span class="n">_restartDirectorInNextLoop</span>  <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_winSizeInPoints</span>    <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// openGL相关的渲染信息都使用该对象</span>
</span><span class='line'>    <span class="n">_openGLView</span>             <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 缩放</span>
</span><span class='line'>    <span class="n">_contentScaleFactor</span>     <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定时器相关，每个循环都会调用该定时器，用户可以在里面注册自己的方法并指定多长时间调用该方法</span>
</span><span class='line'>    <span class="n">_scheduler</span>      <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">Scheduler</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 动画管理器</span>
</span><span class='line'>    <span class="n">_actionManager</span>  <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">ActionManager</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将动画管理器注册到_scheduler，之后每个循环都会调用动画管理器的update方法</span>
</span><span class='line'>    <span class="n">_scheduler</span><span class="o">-&gt;</span><span class="n">scheduleUpdate</span><span class="p">(</span><span class="n">_actionManager</span><span class="p">,</span> <span class="n">Scheduler</span><span class="o">::</span><span class="n">PRIORITY_SYSTEM</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 事件调度器，先注册事件，之后触发事件</span>
</span><span class='line'>    <span class="n">_eventDispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">EventDispatcher</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定义事件director_after_draw，director 在draw之后触发</span>
</span><span class='line'>    <span class="n">_eventAfterDraw</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">EventCustom</span><span class="p">(</span><span class="n">EVENT_AFTER_DRAW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_eventAfterDraw</span><span class="o">-&gt;</span><span class="n">setUserData</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定义事件director_after_visit</span>
</span><span class='line'>    <span class="n">_eventAfterVisit</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">EventCustom</span><span class="p">(</span><span class="n">EVENT_AFTER_VISIT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_eventAfterVisit</span><span class="o">-&gt;</span><span class="n">setUserData</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定义事件director_after_update</span>
</span><span class='line'>    <span class="n">_eventAfterUpdate</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">EventCustom</span><span class="p">(</span><span class="n">EVENT_AFTER_UPDATE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_eventAfterUpdate</span><span class="o">-&gt;</span><span class="n">setUserData</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定义事件director_projection_changed</span>
</span><span class='line'>    <span class="n">_eventProjectionChanged</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">EventCustom</span><span class="p">(</span><span class="n">EVENT_PROJECTION_CHANGED</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_eventProjectionChanged</span><span class="o">-&gt;</span><span class="n">setUserData</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初始化纹理缓存 _textureCache</span>
</span><span class='line'>    <span class="n">initTextureCache</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初始化矩阵堆栈，包括 模型视图_modelViewMatrixStack，投影矩阵_projectionMatrixStack，纹理矩阵_textureMatrixStack</span>
</span><span class='line'>    <span class="n">initMatrixStack</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 渲染器</span>
</span><span class='line'>    <span class="n">_renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">Renderer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 控制台</span>
</span><span class='line'>    <span class="n">_console</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">Console</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取openGL包装器GLView</li>
</ul>


<figure class='code'><figcaption><span>CCGLViewImpl-desktop.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">GLViewImpl</span><span class="o">*</span> <span class="n">GLViewImpl</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">viewName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">GLViewImpl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&amp;&amp;</span> <span class="n">ret</span><span class="o">-&gt;</span><span class="n">initWithRect</span><span class="p">(</span><span class="n">viewName</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">960</span><span class="p">,</span> <span class="mi">640</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">-&gt;</span><span class="n">autorelease</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">GLViewImpl</span><span class="o">::</span><span class="n">initWithRect</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">viewName</span><span class="p">,</span> <span class="n">Rect</span> <span class="n">rect</span><span class="p">,</span> <span class="kt">float</span> <span class="n">frameZoomFactor</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">setViewName</span><span class="p">(</span><span class="n">viewName</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_frameZoomFactor</span> <span class="o">=</span> <span class="n">frameZoomFactor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用之前设置的_glContextAttrs设置glfw</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_RESIZABLE</span><span class="p">,</span><span class="n">GL_FALSE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_RED_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">redBits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_GREEN_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">greenBits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_BLUE_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">blueBits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_ALPHA_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">alphaBits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_DEPTH_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">depthBits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_STENCIL_BITS</span><span class="p">,</span><span class="n">_glContextAttrs</span><span class="p">.</span><span class="n">stencilBits</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 创建窗口</span>
</span><span class='line'>    <span class="n">_mainWindow</span> <span class="o">=</span> <span class="n">glfwCreateWindow</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">_frameZoomFactor</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">_frameZoomFactor</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">_viewName</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>                                   <span class="n">_monitor</span><span class="p">,</span>
</span><span class='line'>                                   <span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwMakeContextCurrent</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置事件绑定</span>
</span><span class='line'>    <span class="n">glfwSetMouseButtonCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>     <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWMouseCallBack</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetCursorPosCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>       <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWMouseMoveCallBack</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetScrollCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>          <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWMouseScrollCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetCharCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>            <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWCharCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetKeyCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>             <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWKeyCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetWindowPosCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>       <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWWindowPosCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetFramebufferSizeCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span> <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWframebuffersize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetWindowSizeCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>      <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWWindowSizeFunCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glfwSetWindowIconifyCallback</span><span class="p">(</span><span class="n">_mainWindow</span><span class="p">,</span>   <span class="n">GLFWEventHandler</span><span class="o">::</span><span class="n">onGLFWWindowIconifyCallback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setFrameSize</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// check OpenGL version at first</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">GLubyte</span><span class="o">*</span> <span class="n">glVersion</span> <span class="o">=</span> <span class="n">glGetString</span><span class="p">(</span><span class="n">GL_VERSION</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">utils</span><span class="o">::</span><span class="n">atof</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">glVersion</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1.5</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">strComplain</span><span class="p">[</span><span class="mi">256</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>        <span class="n">sprintf</span><span class="p">(</span><span class="n">strComplain</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;OpenGL 1.5 or higher is required (your version is %s). Please upgrade the driver of your video card.&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">glVersion</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MessageBox</span><span class="p">(</span><span class="n">strComplain</span><span class="p">,</span> <span class="s">&quot;OpenGL version too old&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initGlew</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Enable point size by default.</span>
</span><span class='line'>    <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_VERTEX_PROGRAM_POINT_SIZE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>鼠标，键盘等事件是通过glfw从系统获取并回调绑定的方法的</li>
</ul>


<figure class='code'><figcaption><span>CCGLViewImpl-desktop.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 其中view就是CCGLViewImpl对象</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">onGLFWMouseCallBack</span><span class="p">(</span><span class="n">GLFWwindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span> <span class="kt">int</span> <span class="n">button</span><span class="p">,</span> <span class="kt">int</span> <span class="n">action</span><span class="p">,</span> <span class="kt">int</span> <span class="n">modify</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_view</span><span class="p">)</span>
</span><span class='line'>        <span class="n">_view</span><span class="o">-&gt;</span><span class="n">onGLFWMouseCallBack</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">button</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">modify</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">GLViewImpl</span><span class="o">::</span><span class="n">onGLFWMouseCallBack</span><span class="p">(</span><span class="n">GLFWwindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span> <span class="kt">int</span> <span class="n">button</span><span class="p">,</span> <span class="kt">int</span> <span class="n">action</span><span class="p">,</span> <span class="kt">int</span> <span class="n">modify</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 鼠标左键</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">GLFW_MOUSE_BUTTON_LEFT</span> <span class="o">==</span> <span class="n">button</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 点击事件</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">GLFW_PRESS</span> <span class="o">==</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_captured</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 如果在窗口区域内</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">getViewPortRect</span><span class="p">().</span><span class="n">equals</span><span class="p">(</span><span class="n">Rect</span><span class="o">::</span><span class="n">ZERO</span><span class="p">)</span> <span class="o">||</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">getViewPortRect</span><span class="p">().</span><span class="n">containsPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">_mouseX</span><span class="p">,</span><span class="n">_mouseY</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">intptr_t</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 点击开始</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">handleTouchesBegin</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_mouseX</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_mouseY</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 鼠标放开事件</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">GLFW_RELEASE</span> <span class="o">==</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_captured</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_captured</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">intptr_t</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">handleTouchesEnd</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_mouseX</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_mouseY</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转换坐标，glfw的鼠标坐标转换到屏幕坐标</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">cursorX</span> <span class="o">=</span> <span class="p">(</span><span class="n">_mouseX</span> <span class="o">-</span> <span class="n">_viewPortRect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">_scaleX</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">cursorY</span> <span class="o">=</span> <span class="p">(</span><span class="n">_viewPortRect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">_viewPortRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">_mouseY</span><span class="p">)</span> <span class="o">/</span> <span class="n">_scaleY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">GLFW_PRESS</span> <span class="o">==</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 新建事件</span>
</span><span class='line'>        <span class="n">EventMouse</span> <span class="n">event</span><span class="p">(</span><span class="n">EventMouse</span><span class="o">::</span><span class="n">MouseEventType</span><span class="o">::</span><span class="n">MOUSE_DOWN</span><span class="p">);</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">setCursorPosition</span><span class="p">(</span><span class="n">cursorX</span><span class="p">,</span> <span class="n">cursorY</span><span class="p">);</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">setMouseButton</span><span class="p">(</span><span class="n">button</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 获取director中事件调度器，触发该事件</span>
</span><span class='line'>        <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">GLFW_RELEASE</span> <span class="o">==</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 新建事件</span>
</span><span class='line'>        <span class="n">EventMouse</span> <span class="n">event</span><span class="p">(</span><span class="n">EventMouse</span><span class="o">::</span><span class="n">MouseEventType</span><span class="o">::</span><span class="n">MOUSE_UP</span><span class="p">);</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">setCursorPosition</span><span class="p">(</span><span class="n">cursorX</span><span class="p">,</span> <span class="n">cursorY</span><span class="p">);</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">setMouseButton</span><span class="p">(</span><span class="n">button</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 获取director中事件调度器，触发该事件</span>
</span><span class='line'>        <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建 用户自定义场景，将场景设置为<em>nextScene， 在后面的主循环中替换为</em>runningScene并开始渲染</li>
</ul>


<figure class='code'><figcaption><span>CCDirector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">runWithScene</span><span class="p">(</span><span class="n">Scene</span> <span class="o">*</span><span class="n">scene</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">scene</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">,</span> <span class="s">&quot;This command can only be used to start the Director. There is already a scene present.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">_runningScene</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">,</span> <span class="s">&quot;_runningScene should be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushScene</span><span class="p">(</span><span class="n">scene</span><span class="p">);</span>
</span><span class='line'>    <span class="n">startAnimation</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">pushScene</span><span class="p">(</span><span class="n">Scene</span> <span class="o">*</span><span class="n">scene</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">scene</span><span class="p">,</span> <span class="s">&quot;the scene should not null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_sendCleanupToScene</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_scenesStack</span><span class="p">.</span><span class="n">pushBack</span><span class="p">(</span><span class="n">scene</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_nextScene</span> <span class="o">=</span> <span class="n">scene</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">DisplayLinkDirector</span><span class="o">::</span><span class="n">startAnimation</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">gettimeofday</span><span class="p">(</span><span class="n">_lastUpdate</span><span class="p">,</span> <span class="k">nullptr</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;cocos2d: DisplayLinkDirector: Error on gettimeofday&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_invalid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setNextDeltaTimeZero</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">setNextDeltaTimeZero</span><span class="p">(</span><span class="kt">bool</span> <span class="n">nextDeltaTimeZero</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_nextDeltaTimeZero</span> <span class="o">=</span> <span class="n">nextDeltaTimeZero</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>窗口相关的宽高初始设定就是setFrameSize，之后GLView，Director 获取的窗口宽高都是这里设定的值</li>
</ul>


<figure class='code'><figcaption><span>CCGLViewImpl-desktop.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">GLViewImpl</span><span class="o">::</span><span class="n">setFrameSize</span><span class="p">(</span><span class="kt">float</span> <span class="n">width</span><span class="p">,</span> <span class="kt">float</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">GLView</span><span class="o">::</span><span class="n">setFrameSize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">updateFrameSize</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>CCGLView.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">GLView</span><span class="o">::</span><span class="n">setFrameSize</span><span class="p">(</span><span class="kt">float</span> <span class="n">width</span><span class="p">,</span> <span class="kt">float</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_designResolutionSize</span> <span class="o">=</span> <span class="n">_screenSize</span> <span class="o">=</span> <span class="n">Size</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>初始化部分完成，进入游戏主循环</h3>

<figure class='code'><figcaption><span>CCApplication-mac.mm </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">Application</span><span class="o">::</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 游戏主循环，直到接受glview的关闭窗口命令</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">glview</span><span class="o">-&gt;</span><span class="n">windowShouldClose</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lastTime</span> <span class="o">=</span> <span class="n">getCurrentMillSecond</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 主循环</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">mainLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 每次循环中触发glfw的事件，如果有事件发生那么就会调用上面绑定的监听函数</span>
</span><span class='line'>        <span class="n">glview</span><span class="o">-&gt;</span><span class="n">pollEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">curTime</span> <span class="o">=</span> <span class="n">getCurrentMillSecond</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果持续事件小于上面设置的1/60秒，那么休眠对应的时间，保证主循环在1/60秒调用第一次</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">curTime</span> <span class="o">-</span> <span class="n">lastTime</span> <span class="o">&lt;</span> <span class="n">_animationInterval</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">usleep</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">useconds_t</span><span class="o">&gt;</span><span class="p">((</span><span class="n">_animationInterval</span> <span class="o">-</span> <span class="n">curTime</span> <span class="o">+</span> <span class="n">lastTime</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>mainloop</h3>

<figure class='code'><figcaption><span>CCDirector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">DisplayLinkDirector</span><span class="o">::</span><span class="n">mainLoop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 如果需要清理导演，那么清理导演</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_purgeDirectorInNextLoop</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_purgeDirectorInNextLoop</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">purgeDirector</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 如果需要重启导演，那么重启导演</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_restartDirectorInNextLoop</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_restartDirectorInNextLoop</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">restartDirector</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_invalid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// openGL 渲染</span>
</span><span class='line'>        <span class="n">drawScene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 释放需要释放的对象</span>
</span><span class='line'>        <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>drawScene</h3>

<figure class='code'><figcaption><span>CCDirector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">drawScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 计算持续事件</span>
</span><span class='line'>    <span class="n">calculateDeltaTime</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 触发glfw的事件</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_openGLView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_openGLView</span><span class="o">-&gt;</span><span class="n">pollEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果不暂停执行</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_paused</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 定时器，主要用来调用动画，之前在导演初始化绑定了ActionManager的update方法</span>
</span><span class='line'>        <span class="n">_scheduler</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">(</span><span class="n">_deltaTime</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 触发事件director_after_update，该事件是初始化导演时候定义的</span>
</span><span class='line'>        <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterUpdate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_renderer</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_nextScene</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 将_nextScene设置为__runningScene，还有会调用所有当前scene下面孩子中用户注册的onEnter方法</span>
</span><span class='line'>        <span class="n">setNextScene</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_runningScene</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="cp">#if CC_USE_PHYSICS</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">physicsWorld</span> <span class="o">=</span> <span class="n">_runningScene</span><span class="o">-&gt;</span><span class="n">getPhysicsWorld</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">physicsWorld</span> <span class="o">&amp;&amp;</span> <span class="n">physicsWorld</span><span class="o">-&gt;</span><span class="n">isAutoStep</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">physicsWorld</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">(</span><span class="n">_deltaTime</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="c1">//clear draw stats</span>
</span><span class='line'>        <span class="n">_renderer</span><span class="o">-&gt;</span><span class="n">clearDrawStats</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将scene下面所有孩子的渲染参数输出到openGL中，通过便利孩子节点的visit方法，visit方法会调用自身的draw方法</span>
</span><span class='line'>        <span class="n">_runningScene</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="n">_renderer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterVisit</span><span class="p">);</span>
</span><span class='line'><span class="cp">#if CC_USE_PHYSICS</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">physicsWorld</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">physicsWorld</span><span class="o">-&gt;</span><span class="n">_updateBodyTransform</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// draw the notifications node</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_notificationNode</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_notificationNode</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">_renderer</span><span class="p">,</span> <span class="n">Mat4</span><span class="o">::</span><span class="n">IDENTITY</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_displayStats</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">showStats</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">_renderer</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterDraw</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_totalFrames</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 刷新openGL数据，将图像显示到屏幕</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_openGLView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_openGLView</span><span class="o">-&gt;</span><span class="n">swapBuffers</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_displayStats</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">calculateMPF</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>动画解析</h3>

<ul>
<li><em>scheduler::update 会调用 </em>actionManger::update方法</li>
<li>下面的callback就是在导演中注册的_actionManger::update方法</li>
</ul>


<figure class='code'><figcaption><span>CCScheduler.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">cheduler</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DL_FOREACH_SAFE</span><span class="p">(</span><span class="n">_updatesNegList</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="o">!</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">paused</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">markedForDeletion</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">entry</span><span class="o">-&gt;</span><span class="n">callback</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ActionManager会遍历所有注册的Node对象的action对象</li>
<li>调用action的step方法</li>
<li>父类中的step方法会调用具体子类对象的update方法</li>
</ul>


<figure class='code'><figcaption><span>CCActionManager.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">ActionManager</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 遍历所有注册的Node对象</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">tHashElement</span> <span class="o">*</span><span class="n">elt</span> <span class="o">=</span> <span class="n">_targets</span><span class="p">;</span> <span class="n">elt</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_currentTarget</span>          <span class="o">=</span> <span class="n">elt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_currentTargetSalvaged</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">paused</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 遍历Node对象中注册的所有action对象</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span> <span class="o">&lt;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">;</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="p">(</span><span class="n">Action</span><span class="o">*</span><span class="p">)</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentActionSalvaged</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 调用每个action对象的step方法</span>
</span><span class='line'>                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">step</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentActionSalvaged</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// The currentAction told the node to remove it. To prevent the action from</span>
</span><span class='line'>                    <span class="c1">// accidentally deallocating itself before finishing its step, we retained</span>
</span><span class='line'>                    <span class="c1">// it. Now that step is done, it&#39;s safe to release it.</span>
</span><span class='line'>                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">isDone</span><span class="p">())</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">Action</span> <span class="o">*</span><span class="n">action</span> <span class="o">=</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="p">;</span>
</span><span class='line'>                    <span class="c1">// Make currentAction nil to prevent removeAction from salvaging it.</span>
</span><span class='line'>                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">removeAction</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// elt, at this moment, is still valid</span>
</span><span class='line'>        <span class="c1">// so it is safe to ask this here (issue #490)</span>
</span><span class='line'>        <span class="n">elt</span> <span class="o">=</span> <span class="p">(</span><span class="n">tHashElement</span><span class="o">*</span><span class="p">)(</span><span class="n">elt</span><span class="o">-&gt;</span><span class="n">hh</span><span class="p">.</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// only delete currentTarget if no actions were scheduled during the cycle (issue #481)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_currentTargetSalvaged</span> <span class="o">&amp;&amp;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">deleteHashElement</span><span class="p">(</span><span class="n">_currentTarget</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// issue #635</span>
</span><span class='line'>    <span class="n">_currentTarget</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>CCActionInstant.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">ActionInstant</span><span class="o">::</span><span class="n">step</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CC_UNUSED_PARAM</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">update</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>CCActionInterval.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">ActionInterval</span><span class="o">::</span><span class="n">step</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_firstTick</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_firstTick</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_elapsed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_elapsed</span> <span class="o">+=</span> <span class="n">dt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">(</span><span class="n">MAX</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span>                                  <span class="c1">// needed for rewind. elapsed could be negative</span>
</span><span class='line'>                      <span class="n">MIN</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">_elapsed</span> <span class="o">/</span>
</span><span class='line'>                          <span class="n">MAX</span><span class="p">(</span><span class="n">_duration</span><span class="p">,</span> <span class="n">FLT_EPSILON</span><span class="p">)</span>   <span class="c1">// division by 0</span>
</span><span class='line'>                          <span class="p">)</span>
</span><span class='line'>                      <span class="p">)</span>
</span><span class='line'>                 <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>MoveBy 对象</li>
</ul>


<figure class='code'><figcaption><span>CCActionInterval.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">MoveBy</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="cp">#if CC_ENABLE_STACKABLE_ACTIONS</span>
</span><span class='line'>        <span class="n">Vec3</span> <span class="n">currentPos</span> <span class="o">=</span> <span class="n">_target</span><span class="o">-&gt;</span><span class="n">getPosition3D</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Vec3</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">currentPos</span> <span class="o">-</span> <span class="n">_previousPosition</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_startPosition</span> <span class="o">=</span> <span class="n">_startPosition</span> <span class="o">+</span> <span class="n">diff</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Vec3</span> <span class="n">newPos</span> <span class="o">=</span>  <span class="n">_startPosition</span> <span class="o">+</span> <span class="p">(</span><span class="n">_positionDelta</span> <span class="o">*</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_target</span><span class="o">-&gt;</span><span class="n">setPosition3D</span><span class="p">(</span><span class="n">newPos</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_previousPosition</span> <span class="o">=</span> <span class="n">newPos</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>        <span class="n">_target</span><span class="o">-&gt;</span><span class="n">setPosition3D</span><span class="p">(</span><span class="n">_startPosition</span> <span class="o">+</span> <span class="n">_positionDelta</span> <span class="o">*</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// CC_ENABLE_STACKABLE_ACTIONS</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>渲染解析</h3>

<ul>
<li>主循环会调用当前运行中的 场景 的render方法</li>
<li>scene 中的render方法会调用自身的visit方法</li>
<li>visit方法会遍历自身孩子，调用孩子的visit方法</li>
</ul>


<figure class='code'><figcaption><span>CCScene</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">Scene</span><span class="o">::</span><span class="n">render</span><span class="p">(</span><span class="n">Renderer</span><span class="o">*</span> <span class="n">renderer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Camera</span><span class="o">*</span> <span class="n">defaultCamera</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">transform</span> <span class="o">=</span> <span class="n">getNodeToParentTransform</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">camera</span> <span class="p">:</span> <span class="n">_cameras</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">camera</span><span class="o">-&gt;</span><span class="n">isVisible</span><span class="p">())</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span> <span class="o">=</span> <span class="n">camera</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span><span class="o">-&gt;</span><span class="n">getCameraFlag</span><span class="p">()</span> <span class="o">==</span> <span class="n">CameraFlag</span><span class="o">::</span><span class="n">DEFAULT</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">defaultCamera</span> <span class="o">=</span> <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span><span class="p">;</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">);</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">loadMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">,</span> <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span><span class="o">-&gt;</span><span class="n">getViewProjectionMatrix</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//visit the scene</span>
</span><span class='line'>        <span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">transform</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">renderer</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//draw with default camera</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">defaultCamera</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span> <span class="o">=</span> <span class="n">defaultCamera</span><span class="p">;</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">);</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">loadMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">,</span> <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span><span class="o">-&gt;</span><span class="n">getViewProjectionMatrix</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//visit the scene</span>
</span><span class='line'>        <span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">transform</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">renderer</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_PROJECTION</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Camera</span><span class="o">::</span><span class="n">_visitingCamera</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每个Node对象都会遍历自身的孩子对象，并调用draw方法</li>
</ul>


<figure class='code'><figcaption><span>CCNode.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">Node</span><span class="o">::</span><span class="n">visit</span><span class="p">(</span><span class="n">Renderer</span><span class="o">*</span> <span class="n">renderer</span><span class="p">,</span> <span class="k">const</span> <span class="n">Mat4</span> <span class="o">&amp;</span><span class="n">parentTransform</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">parentFlags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// quick return if not visible. children won&#39;t be drawn.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_visible</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">processParentFlags</span><span class="p">(</span><span class="n">parentTransform</span><span class="p">,</span> <span class="n">parentFlags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// IMPORTANT:</span>
</span><span class='line'>    <span class="c1">// To ease the migration to v3.0, we still support the Mat4 stack,</span>
</span><span class='line'>    <span class="c1">// but it is deprecated and your code should not rely on it</span>
</span><span class='line'>    <span class="n">_director</span><span class="o">-&gt;</span><span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_director</span><span class="o">-&gt;</span><span class="n">loadMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">visibleByCamera</span> <span class="o">=</span> <span class="n">isVisitableByVisitingCamera</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_children</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sortAllChildren</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// draw children zOrder &lt; 0</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_children</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">node</span> <span class="o">=</span> <span class="n">_children</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_localZOrder</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">node</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// self draw</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">visibleByCamera</span><span class="p">)</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span><span class="o">=</span><span class="n">_children</span><span class="p">.</span><span class="n">cbegin</span><span class="p">()</span><span class="o">+</span><span class="n">i</span><span class="p">;</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">_children</span><span class="p">.</span><span class="n">cend</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">visibleByCamera</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_director</span><span class="o">-&gt;</span><span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// FIX ME: Why need to set _orderOfArrival to 0??</span>
</span><span class='line'>    <span class="c1">// Please refer to https://github.com/cocos2d/cocos2d-x/pull/6920</span>
</span><span class='line'>    <span class="c1">// reset for next frame</span>
</span><span class='line'>    <span class="c1">// _orderOfArrival = 0;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>主循环解析完毕，进入事件循环</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell语法总结]]></title>
    <link href="http://qindamoni.com/blog/2015/03/31/shellyu-fa-zong-jie/"/>
    <updated>2015-03-31T18:42:47+08:00</updated>
    <id>http://qindamoni.com/blog/2015/03/31/shellyu-fa-zong-jie</id>
    <content type="html"><![CDATA[<h1>重定向</h1>

<ul>
<li>文件描述符

<ul>
<li>0 : 标准输入</li>
<li>1 : 标准输出</li>
<li>2 : 标准错误输出</li>
<li>3 : 用户自定义文件描述符</li>
<li>4 : 用户自定义文件描述符</li>
<li>5 : &hellip;.</li>
</ul>
</li>
</ul>


<!--more-->


<p>文件描述符前面增加 <code>&amp;</code> 即可得到该描述符对应的文件句柄，可以向文件输入输出内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ error_bin 2&gt; &1   //将错误信息重定向输入到&1(标准输出管道文件句柄)</span></code></pre></td></tr></table></div></figure>


<p>创建自定文件描述符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 创建文件描述符3，输出到&amp;3的所有内容会被保存到a.txt文件中</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">exec </span>3&gt; a.txt
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni &gt;<span class="p">&amp;</span>3
</span><span class='line'><span class="nv">$ </span>cat a.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 创建文件描述符3，文件a.txt输入新的内容被绑定到文件描述符3</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">exec </span>3&lt; a.txt
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> &lt;<span class="p">&amp;</span>3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 创建文件描述符3，a.txt的输入绑定到文件描述符3。&amp;3的输入绑定到a.txt</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">exec </span>3&lt;&gt; a.txt
</span></code></pre></td></tr></table></div></figure>


<p>销毁自定义文件描述符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">exec </span>3&gt;<span class="p">&amp;</span>-
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重定向标识

<ul>
<li><code>&gt;</code> : 输出重定向

<ul>
<li>只能与输出相关的命令配合使用

<ul>
<li><code>echo</code>，<code>cat</code>，<code>ls</code> 等

<ul>
<li>因为这些命令默认都是将信息打印到标准输出中，所以重定这些命令的标准输出到其他位置才有意义。</li>
</ul>
</li>
</ul>
</li>
<li>标识左侧内容

<ul>
<li>只能是文件描述符:1和2等

<ul>
<li>理论上左侧内容也可以是0，3，4 等，但是没有哪个输出命令会向这些文件输出内容（一般都是标准输出），所以就算重定向0，3，4到其他位置也没有意义，本来就没有内容。</li>
</ul>
</li>
<li>文件描述符与标识之间不能有空格。<code>1&gt;</code> 正确；<code>1 &gt;</code> 错误</li>
<li>如果左侧什么都不写，默认表示1（标准输出描述符）</li>
</ul>
</li>
<li>标识右侧内容

<ul>
<li>文本文件，管道文件 等</li>
<li><code>1&gt; a.txt</code>，<code>2&gt; &amp;1</code></li>
</ul>
</li>
<li><code>&gt;&gt;</code> 两个标识标示追加的形式添加信息，只能用于文件</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># echo 命令只会向标准输出句柄打印信息，下面例子将echo命令的标准输出1重定向到a.txt文件中，从而将字符qindamoni保存到文件a.txt中</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; a.txt
</span><span class='line'><span class="c"># 等同</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni &gt;a.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># cat 命令只会向标准输出句柄打印信息，通过将标准输出1重定向到b.txt文件，将输出保存到b.txt中</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>cat a.txt 1&gt; b.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 道理同上</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>ls 1&gt; c.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 标准错误输出，即命令如果出错，bash会将错误信息发送到标准错误句柄，通过文件描述符2可以重定向该信息</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>error_bin 2&gt; a.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 同时指定多个文件描述符</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; a.txt 2&gt; a.txt
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 通过 &amp; + 文件描述符 可以获得该文件描述符所代表的文件句柄</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 标准输出重定向到a.txt，标准错误重定向到&amp;1（标准输出句柄）</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; a.txt 2&gt;<span class="p">&amp;</span><span class="m">1</span>                  // 注意只要使用文件描述符，中间不能有空格<span class="o">(</span>&gt;<span class="p">&amp;</span>1<span class="o">)</span>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt; a.txt
</span><span class='line'>
</span><span class='line'><span class="c"># 标准错误重定向到a.txt，标准输出重定向到&amp;2（标准错误句柄）</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 2&gt; a.txt 1&gt;<span class="p">&amp;</span>2
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; <span class="p">&amp;</span><span class="m">2</span> 2&gt;a.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li><code>&lt;</code> : 输入重定向

<ul>
<li>只能与输入命令配合使用

<ul>
<li><code>read</code>，<code>cat</code>,<code>grep</code> 等

<ul>
<li>因为这些命令默认只从标准输入中读取内容，所以重定向这些命令的标准输入到其他位置才有意义。</li>
</ul>
</li>
</ul>
</li>
<li>标示符左侧内容

<ul>
<li>只能是文件描述符：0(标准输入文件描述符)。

<ul>
<li>理论上左侧内容也可以是1，2，3等，但是没有哪个命令会从这些描述符中读取信息，所以就算重定向到1，2，3也没有意义。</li>
</ul>
</li>
<li>如果左侧什么都不写，默认是0。</li>
</ul>
</li>
<li>标示符右侧内容

<ul>
<li>文本文件，管道文件等</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># cat 命令后面如果不跟任何文件名，表示从标准输入读取信息并打印，下面例子将标准输入重定向到a.txt，直接打印了a.txt的内容</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">111</span> 1&gt; a.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">222</span> 1&gt; a.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">333</span> 1&gt; a.txt
</span><span class='line'><span class="nv">$ </span>cat 0&lt; a.txt
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span>cat &lt; a.txt
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span>0&lt; a.txt cat
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># grep 命令后面如果不跟任何文件名，表示从标准输入读取信息并处理信息，下面例子将标准输入重定到a.txt</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>grep <span class="m">1</span> 0&lt; a.txt               // 打印111
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># read 命令只会从标准输入读取一行数据（用换行符截断），下面例子将标准输入重定向到a.txt。打印了第一行信息</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> 0&lt; a.txt     // 打印111
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> 0&lt; a.txt     // 打印111
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> 0&lt; a.txt     // 打印111
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 当前环境中创建一个自定义文件描述符3，与文件b.txt绑定。环境中3会保存当前信息，直到退出bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">exec </span>3&lt;&gt; b.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">111</span> &gt;&gt; b.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">222</span> &gt;&gt; b.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">333</span> &gt;&gt; b.txt
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> &lt;<span class="p">&amp;</span><span class="m">3</span>          // 打印111
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> &lt;<span class="p">&amp;</span><span class="m">3</span>          // 打印222
</span><span class='line'><span class="nv">$ </span><span class="o">(</span><span class="nb">read </span>a<span class="p">;</span><span class="nb">echo</span> <span class="nv">$a</span><span class="o">)</span> &lt;<span class="p">&amp;</span><span class="m">3</span>          // 打印333
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">123</span> &gt; a.txt
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">123</span> 1&gt; a.txt
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span>1&gt; a.txt <span class="nb">echo </span>123
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ </span>&gt;a.txt <span class="nb">echo </span>123
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 重定向原理：echo 程序在内部实现的时候会调用系统的标准输出库（类似cout &lt;&lt;）</span>
</span><span class='line'><span class="c"># echo 程序本身不清楚调用的标准输出库具体会打印到什么地方</span>
</span><span class='line'><span class="c"># 通过环境设置1&gt; a.txt系统已经改变了标准输出的打印位置，对此echo并不知情，echo只会往标准输出的地方打印</span>
</span><span class='line'><span class="c"># 类似指针的概念，此时的标准输出已经指向a.txt文件，所以echo的内容会打印到a.txt文件中</span>
</span><span class='line'><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h1>管道</h1>

<ul>
<li>管道是一种特殊的文件，由linux操作系统提供并实现。</li>
<li>管道文件可以写入内容，也可以读取内容

<ul>
<li>C 语言使用write，read等系统库函数实现管道文件的读和写。</li>
<li>shell 中只能通过将输出命令的标准输出文件描述符重定向到管道文件，或者将输入命令的标准输入文件描述符重定向到管道文件来实现。

<ul>
<li><code>echo qindamoni 1&gt; 管道文件</code></li>
<li><code>cat 0&lt; 管道文件</code></li>
</ul>
</li>
</ul>
</li>
<li>管道文件用于将信息从一个命令传递到另外一个命令中（也可以理解成从一个进程传递到另外一个进程）</li>
<li>管道文件由操作系统提供维护

<ul>
<li>管道文件自动保存文件游标的状态</li>
<li>管道文件两侧写入和输出是阻塞的

<ul>
<li>一个输入命令（应用程序）从管道读取信息，如果管道内容空，那么该命令会一直等待，直到管道中有内容。

<ul>
<li>就像从标准输入读取的read命令一样，程序执行到read方法就会阻塞程序，等待用户输入，直到遇见换行符，程序才会继续。</li>
</ul>
</li>
<li>一个输出命令向管道写入信息，如果写入的信息没有被管道另一头的输入命令取走，那么输出命令也会一直等待直到他输入的信息被取走。</li>
</ul>
</li>
</ul>
</li>
<li>Linux中通过mkfifo可以创建管道文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkfifo a.txt
</span><span class='line'>
</span><span class='line'><span class="c"># 窗口1</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; a.txt
</span><span class='line'><span class="c"># 窗口2</span>
</span><span class='line'><span class="nv">$ </span>cat 0&lt; a.txt
</span><span class='line'>
</span><span class='line'><span class="c"># 窗口1</span>
</span><span class='line'><span class="nv">$ </span>ls &gt; a.txt
</span><span class='line'><span class="c"># 窗口2</span>
</span><span class='line'><span class="nv">$ </span>cat &lt; a.txt
</span><span class='line'>
</span><span class='line'><span class="c"># 窗口1</span>
</span><span class='line'><span class="nv">$ </span><span class="k">while</span><span class="p">;</span><span class="k">do</span> cat &lt; a.txt<span class="p">;</span><span class="k">done</span>
</span><span class='line'><span class="c"># 窗口2</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni &gt; a.txt
</span><span class='line'><span class="nv">$ </span>ls &gt; a.txt
</span><span class='line'><span class="nv">$ </span>df -h &gt; a.txt
</span><span class='line'><span class="nv">$ </span>// 其他任何有输出的命令，将标准输出重定向到a.txt，即可在窗口1看到结果
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkfifo b.txt
</span><span class='line'>
</span><span class='line'><span class="c"># 窗口1</span>
</span><span class='line'><span class="nv">$ </span><span class="o">(</span>cat 0&lt; b.txt<span class="o">)</span> <span class="p">&amp;</span>              // 后台运行，等同于一个新的bash子进程
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; b.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Linux 操作系统匿名管道 <code>|</code>

<ul>
<li>原理与上面的例子一样</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni <span class="p">|</span> cat
</span><span class='line'><span class="nv">$ </span>ls <span class="p">|</span> cat
</span><span class='line'><span class="nv">$ </span>df -h <span class="p">|</span> cat
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>匿名管道只会将前面命令的标准输出转发到后面命令的标准输入中</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 不会达到预期效果</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni 1&gt; a.txt <span class="p">|</span> cat
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>匿名管道后面的命令必须是输入命令（read，cat，grep）等能够接受标准输入的命令

<ul>
<li>输入命令后<code>回车</code>，如果命令是待读取状态，那么该命令就是接受标准输入的命令</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 一些输入命令</span>
</span><span class='line'><span class="nv">$ </span>grep <span class="s1">&#39;qindamoni&#39;</span> <span class="se">\n</span>
</span><span class='line'><span class="nv">$ </span>cat <span class="se">\n</span>
</span><span class='line'><span class="nv">$ </span>more <span class="se">\n</span>
</span><span class='line'><span class="nv">$ </span>tail <span class="se">\n</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">read</span> <span class="se">\n</span>
</span><span class='line'>&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 不到达到预期效果，echo命令不接受标准输入</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>qindamoni <span class="p">|</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<h2>管道与重定向综合应用</h2>

<ul>
<li>需求

<ul>
<li>假设jpeg.sh是将其他格式的图片转换为jpeg格式的脚本程序。目前有将近1000张图片需要处理。因为有些图片太大，导致jpeg.sh在转换一张图片的时间太长。</li>
<li>希望同时执行多个jpeg.sh（多进程）脚本来提高整体的速度。当前机器为8核linux系统，所以希望同时执行8个进程执行脚本。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>mkfifo tmp.fifo
</span><span class='line'><span class="nb">exec </span>3&lt;&gt;tmp.fifo
</span><span class='line'>
</span><span class='line'><span class="nv">coreNum</span><span class="o">=</span>8
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="o">((</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span>i &lt; <span class="nv">$coreNum</span><span class="p">;</span>i++<span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> 1&gt;<span class="p">&amp;</span>3
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file in <span class="s2">&quot;/image/path/&quot;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">read </span>0&lt;<span class="p">&amp;</span><span class="m">3</span>                               // 父进程循环读取管道3，如果没有内容那么阻塞等待有内容进来
</span><span class='line'>    <span class="o">(</span>jpeg.sh <span class="nv">$file</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> 1&gt;<span class="p">&amp;</span>3<span class="o">)</span><span class="p">&amp;</span>        // 创建子进程，子进程完毕后将信息发给管道3
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>            // 等待所有子进程完毕
</span><span class='line'><span class="nb">exec </span>3&gt;<span class="p">&amp;</span>0
</span><span class='line'>rm tmp.fifo
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h1>shell语法</h1>

<h3>通配符</h3>

<ul>
<li>bash 中大部分命令都对通配符支持，而且各个命令间的解析方式统一。

<ul>
<li>默认状态下所有命令都将通配符与当前目录中的文件进行匹配</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> *
</span><span class='line'><span class="nv">$ </span><span class="k">for</span> i in *
</span><span class='line'><span class="nv">$ </span>cat *
</span><span class='line'><span class="nv">$ </span>grep qindamoni *
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>匹配任意单词 <code>?</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *
</span><span class='line'>abc cde def
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls a?c
</span><span class='line'>abc
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a?c
</span><span class='line'>abc
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>匹配指定单词 <code>[abcd]</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls a<span class="o">[</span>abc<span class="o">]</span>c
</span><span class='line'>abc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a<span class="o">[</span>abc<span class="o">]</span>c
</span><span class='line'>abc
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>匹配指定多个单词  <code>{abcd}</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls <span class="o">{</span>ab,bc<span class="o">}</span>c
</span><span class='line'>abc
</span></code></pre></td></tr></table></div></figure>


<h2>变量</h2>

<ul>
<li>shell中所有变量都是字符串，即使赋值是数字也当字符串看待。

<ul>
<li>一些命令在需要数字的时候会自动将字符串变量转换成数字来计算。</li>
</ul>
</li>
<li>变量赋值使用 <code>=</code> 而且 <code>=</code> 两边不能有空格

<ul>
<li>如果赋值内容包含空格，那么需要加上引号。</li>
</ul>
</li>
<li>使用 <code>$</code> 可以获取变量值

<ul>
<li>$a 放到双引号中会自动转换为他的值</li>
<li>$a 放到单引号，原样输出</li>
</ul>
</li>
</ul>


<h3>环境变量</h3>

<ul>
<li>全局变量，可以在当前进程直接使用的变量</li>
<li>子进程会继承父进程的环境变量</li>
<li>系统环境变量

<ul>
<li>由操作系统赋值，在shell程序中可以直接使用

<ul>
<li>$HOME

<ul>
<li>家目录</li>
</ul>
</li>
<li>$PATH

<ul>
<li>搜索目录</li>
</ul>
</li>
<li>$PS1

<ul>
<li>提示符</li>
</ul>
</li>
<li>$PS2

<ul>
<li>二级提示符，就是待读取状态下的提示符</li>
</ul>
</li>
<li>$IFS

<ul>
<li>默认输入分隔符</li>
</ul>
</li>
<li>$0

<ul>
<li>脚本的名字</li>
</ul>
</li>
<li>$#

<ul>
<li>脚本参数的个数</li>
</ul>
</li>
<li>$$

<ul>
<li>进程号</li>
</ul>
</li>
<li>$?

<ul>
<li>上一个命令的返回值(exit 0 或 1)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>自定义环境变量

<ul>
<li>用户自己定义的环境变量

<ul>
<li><code>name=qindamoni command.sh</code> name 是程序command.sh的环境变量</li>
</ul>
</li>
</ul>
</li>
<li>shell程序中使用 <code>env</code> 可以获得当前进程的环境变量

<ul>
<li>c 中getenv(&ldquo;HOME&rdquo;)</li>
<li>php 中getenv(&ldquo;HOME&rdquo;)</li>
<li>python 中os.getenv(&ldquo;HOME&rdquo;)</li>
</ul>
</li>
<li>普通变量使用 <code>export</code> 可以将普通变量赋值给子进程的环境变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 直接使用环境变量</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$HOME</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PATH</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PS1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 打印当前bash环境的所有环境变量</span>
</span><span class='line'><span class="nv">$ </span>env
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="nv">$ a</span><span class="o">=</span><span class="k">$(</span>env<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$a</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 手动定义子进程的环境变量</span>
</span><span class='line'><span class="c"># command.sh</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ name</span><span class="o">=</span>qindamoni ./command.sh
</span><span class='line'>
</span><span class='line'><span class="c"># 普通变量设置子进程环境变量</span>
</span><span class='line'><span class="c"># command.sh</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$sex</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">sec</span><span class="o">=</span>man
</span><span class='line'><span class="nv">$ </span>./command.sh
</span><span class='line'>
</span><span class='line'><span class="c"># 子进程查看所有环境变量</span>
</span><span class='line'><span class="c"># command.sh</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">a</span><span class="o">=</span><span class="k">$(</span>env<span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$a</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">x</span><span class="o">=</span>1
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">y</span><span class="o">=</span>1
</span><span class='line'><span class="nv">$ z</span><span class="o">=</span><span class="m">1</span> ./command.sh
</span><span class='line'>
</span><span class='line'><span class="c"># 继承</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参数变量</h3>

<ul>
<li>通过命令或执行程序后面添加的参数</li>
<li>shell 脚本中使用 <code>$1</code> <code>$2</code> <code>$3</code> 获取具体位置的参数

<ul>
<li><code>$1</code> <code>$2</code> <code>$3</code> 具体位置的参数</li>
<li><code>$*</code> 所有参数，使用IFS中的第一个字符分隔</li>
<li><code>$@</code> 所有参数，使用空格分割</li>
</ul>
</li>
<li>其他语言的参数变量

<ul>
<li>c 语言使用main函数的参数argv,argc获取</li>
<li>php 使用global argv,argc获取</li>
<li>python 使用os.argv,os.argc获取</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># command.sh</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$1</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$2</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$#</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$*</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> i in <span class="nv">$*</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> i in <span class="nv">$@</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./command.sh a b c d e
</span></code></pre></td></tr></table></div></figure>


<h2>条件</h2>

<ul>
<li><code>test</code> 或者 <code>[</code> 判断，两个是等价的</li>
<li><code>test</code> 或者 <code>[</code> 与后面字符之间必须有空格</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="nb">test</span> -f a.txt
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>qindamoni
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f a.txt <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>qindamoni
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价，如果放到同一行，使用 ; 将test和then分开</span>
</span><span class='line'><span class="k">if</span> <span class="nb">test</span> -f a.txt<span class="p">;</span><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>qindamoni
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f a.txt <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>qindamoni
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>test</code> 命令的本质是一个执行程序，将后面的参数进行判断再返回退出状态(exit 0 或 1)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>/bin/test <span class="nv">1</span> <span class="o">=</span> 2
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>1
</span><span class='line'><span class="nv">$ </span>/bin/test <span class="nv">1</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>if 指令的本质是判断后面执行的命令的返回状态，如果状态0那么标示true，继续执行。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># command.sh</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="k">if</span> command.sh<span class="p">;</span><span class="k">then</span> <span class="nb">echo </span>qindamoni<span class="p">;</span><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>比较符号</h3>

<ul>
<li>字符串比较

<ul>
<li>string1 = string2

<ul>
<li>防止字符串出现[ = &ldquo;yes&rdquo; ]情况，尽量两边都用双引号，[ &ldquo;&rdquo; = &ldquo;yes&rdquo; ]</li>
</ul>
</li>
<li>string1 != string2</li>
<li>-n string

<ul>
<li>字符串不为空返回真</li>
</ul>
</li>
<li>-z string

<ul>
<li>字符串为空返回真</li>
</ul>
</li>
</ul>
</li>
<li>算数比较

<ul>
<li>exp1 -eq exp2

<ul>
<li>表达式相等返回真</li>
</ul>
</li>
<li>exp1 -ne exp2

<ul>
<li>表达式不相等返回真</li>
</ul>
</li>
<li>exp1 -gt exp2

<ul>
<li>exp1 大于 exp2</li>
</ul>
</li>
<li>exp1 -ge exp2

<ul>
<li>exp1 大于等于 exp2</li>
</ul>
</li>
<li>exp1 -lt exp2

<ul>
<li>exp1 小于 exp2</li>
</ul>
</li>
<li>exp1 -le exp2

<ul>
<li>exp1 小于等于 exp2</li>
</ul>
</li>
<li>!exp

<ul>
<li>exp 假，返回真</li>
<li>exp 真，返回假</li>
</ul>
</li>
</ul>
</li>
<li>文件比较

<ul>
<li>-d file

<ul>
<li>目录</li>
</ul>
</li>
<li>-e file

<ul>
<li>文件存在</li>
</ul>
</li>
<li>-f file

<ul>
<li>普通文件</li>
</ul>
</li>
<li>-g file

<ul>
<li>set-group-id</li>
</ul>
</li>
<li>-r file

<ul>
<li>文件可读</li>
</ul>
</li>
<li>-s file

<ul>
<li>大小不为0</li>
</ul>
</li>
<li>-u file

<ul>
<li>set-user-id</li>
</ul>
</li>
<li>-w file

<ul>
<li>文件可写</li>
</ul>
</li>
<li>-x file

<ul>
<li>文件可执行</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>控制结构</h2>

<h3>if 语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> condition
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">if</span> condition<span class="p">;</span><span class="k">then</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">if</span> condition<span class="p">;</span><span class="k">then</span> statments<span class="p">;</span><span class="k">else</span> statments<span class="p">;</span><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>elfi 语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> condition
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    statments
</span><span class='line'>elfi condition
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>for 语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> variable in values
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">for</span> variable in values<span class="p">;</span><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 特殊结构</span>
</span><span class='line'><span class="k">for</span><span class="o">((</span><span class="nv">i</span> <span class="o">=</span> 0<span class="p">;</span>i &lt;<span class="o">=</span> 100<span class="p">;</span>i++<span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 通配符结构</span>
</span><span class='line'><span class="k">for</span> i in *
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 命令执行结构</span>
</span><span class='line'><span class="k">for</span> i in <span class="k">$(</span><span class="nb">command</span><span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>while 语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while</span> condition
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">while</span> condition<span class="p">;</span><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 如</span>
</span><span class='line'><span class="k">while</span> <span class="nb">test</span> -f a.txt<span class="p">;</span><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">test </span><span class="nv">a</span> <span class="o">=</span> b<span class="p">;</span><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>until语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">until</span> condition
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价</span>
</span><span class='line'><span class="k">until</span> condition<span class="p">;</span><span class="k">do</span>
</span><span class='line'>    statments
</span><span class='line'>doen
</span></code></pre></td></tr></table></div></figure>


<h3>case语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">case</span> variable in
</span><span class='line'>    pattern <span class="o">[</span> <span class="p">|</span> parttern <span class="o">]</span> <span class="o">)</span> statmetns<span class="p">;;</span>
</span><span class='line'>    pattern <span class="o">[</span> <span class="p">|</span> parttern <span class="o">]</span> <span class="o">)</span> statmetns<span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 例子</span>
</span><span class='line'><span class="c"># 判断是严格按照顺序执行的，如果yes满足不会在进入下面y分支</span>
</span><span class='line'><span class="c"># 必须使用;;结束当前判断</span>
</span><span class='line'><span class="nb">read </span>a
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$a&quot;</span> in
</span><span class='line'>    yes <span class="o">)</span> <span class="nb">echo </span>1<span class="p">;;</span>
</span><span class='line'>    no <span class="o">)</span> <span class="nb">echo </span>2<span class="p">;;</span>
</span><span class='line'>    y <span class="o">)</span> <span class="nb">echo </span>3<span class="p">;;</span>
</span><span class='line'>    n <span class="o">)</span> <span class="nb">echo </span>4<span class="p">;;</span>
</span><span class='line'>    * <span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;all&quot;</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">read </span>a
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$a&quot;</span> in
</span><span class='line'>    yes <span class="p">|</span> y <span class="p">|</span> Yes <span class="p">|</span> YES <span class="o">)</span> <span class="nb">echo </span>1<span class="p">;;</span>
</span><span class='line'>    n* <span class="p">|</span> N* <span class="o">)</span> <span class="nb">echo </span>2<span class="p">;;</span>
</span><span class='line'>    * <span class="o">)</span>
</span><span class='line'>ease
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">read </span>a
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$a&quot;</span> in
</span><span class='line'>    <span class="o">[</span>yY<span class="o">]</span>* <span class="o">)</span> <span class="nb">echo </span>1<span class="p">;;</span>
</span><span class='line'>    <span class="o">[</span>nN<span class="o">]</span>* <span class="p">|</span> <span class="o">[</span>a<span class="o">]</span>*<span class="o">)</span> <span class="nb">echo </span>2<span class="p">;;</span>
</span><span class='line'>    * <span class="o">)</span> <span class="nb">echo </span>3<span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<h3>命令列表</h3>

<ul>
<li>AND 列表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 如果每个都是true那么最终结果就是true</span>
</span><span class='line'>statment1 <span class="o">&amp;&amp;</span> statment2 <span class="o">&amp;&amp;</span> statment3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>OR 列表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 如果有一个是true那么最终结果就是true</span>
</span><span class='line'>statment1 <span class="o">||</span> statment2 <span class="o">||</span> statment3
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim技巧总结]]></title>
    <link href="http://qindamoni.com/blog/2015/01/13/vimji-qiao-zong-jie/"/>
    <updated>2015-01-13T00:05:40+08:00</updated>
    <id>http://qindamoni.com/blog/2015/01/13/vimji-qiao-zong-jie</id>
    <content type="html"><![CDATA[<ul>
<li>重复删除单个单词</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复删除单行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dd
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复缩进当前行及后面的行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;G
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>重复每个行后面添加;号</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A;&lt;Esc&gt;
</span><span class='line'>j
</span><span class='line'>.
</span><span class='line'>j
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接进入编辑模式的组合符号</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C = c$          // 当前位置删到行尾 
</span><span class='line'>s = cl          // 当前位置删除
</span><span class='line'>S = 0c          // 当前位置删到行首
</span><span class='line'>I = 0i          // 行首插入
</span><span class='line'>A = $a          // 行尾插入
</span><span class='line'>o = A&lt;Enter&gt;    // 下行插入
</span><span class='line'>O = ko          // 上行插入</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定+号两侧插入空格，可重复操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f+
</span><span class='line'>s + 
</span><span class='line'>;
</span><span class='line'>.
</span><span class='line'>;
</span><span class='line'>.
</span><span class='line'>;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复与回滚</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>修改回滚            .   u
</span><span class='line'>行内查找    f+      ;   ,
</span><span class='line'>全文查找    /+      n   N
</span><span class='line'>全文查找    ?+      n   N
</span><span class='line'>替换回滚    :s/1/2  &   u</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查找指定单词并修改，可重复操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*               // 全文查找当前光标下的单词
</span><span class='line'>cw{abc}&lt;Esc&gt;
</span><span class='line'>n
</span><span class='line'>.
</span><span class='line'>n
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除单个单词delete a word，可重复</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>daw
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>操作符 ＋ 动作</li>
</ul>


<p>操作符</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>c       // 修改
</span><span class='line'>d       // 删除
</span><span class='line'>y       // 复制
</span><span class='line'>&gt;       // 缩进
</span><span class='line'>&lt;       // 缩小
</span><span class='line'>=       // 自动缩进</span></code></pre></td></tr></table></div></figure>


<p>重复操作符表示当前行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cc
</span><span class='line'>dd
</span><span class='line'>yy
</span><span class='line'>&gt;&gt;
</span><span class='line'>&lt;&lt;</span></code></pre></td></tr></table></div></figure>


<p>动作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>j h l k
</span><span class='line'>aw      // 一个单词
</span><span class='line'>ap      // 一个段落
</span><span class='line'>gg      // 文档首
</span><span class='line'>G       // 文档尾
</span><span class='line'>0       // 行首
</span><span class='line'>$       // 行尾</span></code></pre></td></tr></table></div></figure>


<p>常见组合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>daw     // 删除一个单词
</span><span class='line'>yaw     // 复制一个单词
</span><span class='line'>&gt;G</span></code></pre></td></tr></table></div></figure>


<ul>
<li>插入模式，快速操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Ctrl&gt;h     // 删除前面一个字符
</span><span class='line'>&lt;Ctrl&gt;w     // 删除前面一个单词
</span><span class='line'>&lt;Ctrl&gt;u     // 删至行首</span></code></pre></td></tr></table></div></figure>


<ul>
<li>插入模式，简单运算</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i
</span><span class='line'>&lt;Ctrl&gt;r=100+100</span></code></pre></td></tr></table></div></figure>


<ul>
<li>插入模式，输入unicode编码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i
</span><span class='line'>&lt;Ctrl&gt;v65       // A</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可视模式</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v       // 面向字符的可视化模式
</span><span class='line'>V       // 面向行的可视化模式
</span><span class='line'>&lt;Ctrl&gt;v // 面向列的可视化模式
</span><span class='line'>gv      // 重选上次的高亮区域</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vj
</span><span class='line'>&gt;
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Ctrl&gt;v
</span><span class='line'>j
</span><span class='line'>x 
</span><span class='line'>gv
</span><span class='line'>r|
</span><span class='line'>yyp
</span><span class='line'>Vr-</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js Api 列表]]></title>
    <link href="http://qindamoni.com/blog/2014/12/20/js-api-lie-biao/"/>
    <updated>2014-12-20T13:45:21+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/20/js-api-lie-biao</id>
    <content type="html"><![CDATA[<h3>Object</h3>

<h4>类型属性</h4>

<h5>Object.create</h5>

<h5>Object.defineProperties</h5>

<h5>Object.defineProperty</h5>

<h5>Object.freeze</h5>

<h5>Object.getOwnPropertyDescriptor</h5>

<h5>Object.getOwnPropertyNames</h5>

<h5>Object.getPrototypeOf</h5>

<h5>Object.is</h5>

<h5>Object.isExtensible</h5>

<h5>Object.isFrozen</h5>

<h5>Object.isSealed</h5>

<h5>Object.keys</h5>

<h5>Object.preventExtensions</h5>

<h5>Object.prototype</h5>

<h5>Object.seal</h5>

<!--more-->


<h4>对象属性</h4>

<h5>Object.prototype.<strong>defineGetter</strong></h5>

<h5>Object.prototype.<strong>defineSetter</strong></h5>

<h5>Object.prototype.<strong>lookupGetter</strong></h5>

<h5>Object.prototype.<strong>lookupSetter</strong></h5>

<h5>Object.prototype.constructor</h5>

<h5>Object.prototype.hasOwnProperty</h5>

<h5>Object.prototype.isPrototypeOf</h5>

<h5>Object.prototype.propertyIsEnumerable</h5>

<h5>Object.prototype.toLocaleString</h5>

<h5>Object.prototype.toString</h5>

<h5>Object.prototype.valueOf</h5>

<hr />

<h3>Function</h3>

<h4>对象属性</h4>

<h5>Function.prototype.call</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// print null,1,2</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;val&#39;</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// print {&#39;val&#39;:&#39;123&#39;},1,2</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Function.prototype.apply</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// print null,1,2</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;val&#39;</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// print {&#39;val&#39;:&#39;123&#39;},1,2</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Function.prototype.bind</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arg1</span><span class="p">,</span><span class="nx">arg2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newFunc</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// print null,1,2</span>
</span><span class='line'><span class="nx">newFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;val&#39;</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newFunc</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="c1">// print {&#39;val&#39;:&#39;123&#39;},1,2</span>
</span><span class='line'><span class="nx">newFunc</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Function.prototype.arguments</h5>

<h5>Function.prototype.caller</h5>

<h5>Function.prototype.length</h5>

<h5>Function.prototype.name</h5>

<hr />

<h3>Array</h3>

<h4>类型属性</h4>

<h5>Array.isArray</h5>

<h4>对象属性，Array.prototype的属性</h4>

<h5>Array.prototype.concat</h5>

<h5>Array.prototype.every</h5>

<h5>Array.prototype.filter</h5>

<h5>Array.prototype.forEach</h5>

<h5>Array.prototype.indexOf</h5>

<h5>Array.prototype.join</h5>

<h5>Array.prototype.lastIndexOf</h5>

<h5>Array.prototype.length</h5>

<h5>Array.prototype.map</h5>

<h5>Array.prototype.pop</h5>

<h5>Array.prototype.push</h5>

<h5>Array.prototype.reduce</h5>

<h5>Array.prototype.reduceRight</h5>

<h5>Array.prototype.reverse</h5>

<h5>Array.prototype.shift</h5>

<h5>Array.prototype.slice</h5>

<h5>Array.prototype.some</h5>

<h5>Array.prototype.sort</h5>

<h5>Array.prototype.splice</h5>

<h5>Array.prototype.unshift</h5>

<hr />

<h3>Date</h3>

<h4>类型属性</h4>

<h5>Date.UTC</h5>

<h5>Date.now</h5>

<h5>Date.parse</h5>

<h4>对象属性，Date.prototype的属性</h4>

<h5>Date.prototype.getDate</h5>

<h5>Date.prototype.getDay</h5>

<h5>Date.prototype.getFullYear</h5>

<h5>Date.prototype.getHours</h5>

<h5>Date.prototype.getMilliseconds</h5>

<h5>Date.prototype.getMinutes</h5>

<h5>Date.prototype.getMonth</h5>

<h5>Date.prototype.getSeconds</h5>

<h5>Date.prototype.getTime</h5>

<h5>Date.prototype.getTimezoneOffset</h5>

<h5>Date.prototype.getUTCDate</h5>

<h5>Date.prototype.getUTCDay</h5>

<h5>Date.prototype.getUTCFullYear</h5>

<h5>Date.prototype.getUTCHours</h5>

<h5>Date.prototype.getUTCMilliseconds</h5>

<h5>Date.prototype.getUTCMinutes</h5>

<h5>Date.prototype.getUTCMonth</h5>

<h5>Date.prototype.getUTCSeconds</h5>

<h5>Date.prototype.getYear</h5>

<h5>Date.prototype.setDate</h5>

<h5>Date.prototype.setFullYear</h5>

<h5>Date.prototype.setHours</h5>

<h5>Date.prototype.setMilliseconds</h5>

<h5>Date.prototype.setMinutes</h5>

<h5>Date.prototype.setMonth</h5>

<h5>Date.prototype.setSeconds</h5>

<h5>Date.prototype.setTime</h5>

<h5>Date.prototype.setUTCDate</h5>

<h5>Date.prototype.setUTCFullYear</h5>

<h5>Date.prototype.setUTCHours</h5>

<h5>Date.prototype.setUTCMilliseconds</h5>

<h5>Date.prototype.setUTCMinutes</h5>

<h5>Date.prototype.setUTCMonth</h5>

<h5>Date.prototype.setUTCSeconds</h5>

<h5>Date.prototype.setYear</h5>

<h5>Date.prototype.toDateString</h5>

<h5>Date.prototype.toGMTString</h5>

<h5>Date.prototype.toISOString</h5>

<h5>Date.prototype.toJSON</h5>

<h5>Date.prototype.toLocaleDateString</h5>

<h5>Date.prototype.toLocaleTimeString</h5>

<h5>Date.prototype.toTimeString</h5>

<h5>Date.prototype.toUTCString</h5>

<hr />

<h3>Number</h3>

<h4>类型属性</h4>

<h5>Number.MAX_VALUE</h5>

<h5>Number.MIN_VALUE</h5>

<h5>Number.NEGATIVE_INFINITY</h5>

<h5>Number.NaN</h5>

<h5>Number.POSITIVE_INFINITY</h5>

<h5>Number.isFinite</h5>

<h5>Number.isNaN</h5>

<h5>Number.prototype</h5>

<h4>对象属性，Number.prototype</h4>

<h5>Number.prototype.toExponential</h5>

<h5>Number.prototype.toFixed</h5>

<h5>Number.prototype.toPrecision</h5>

<hr />

<h3>String</h3>

<h4>类型属性</h4>

<h5>String.fromCharCode</h5>

<h4>对象属性</h4>

<h5>String.prototype.anchor</h5>

<h5>String.prototype.big</h5>

<h5>String.prototype.blink</h5>

<h5>String.prototype.bold</h5>

<h5>String.prototype.charAt</h5>

<h5>String.prototype.charCodeAt</h5>

<h5>String.prototype.concat</h5>

<h5>String.prototype.fixed</h5>

<h5>String.prototype.fontcolor</h5>

<h5>String.prototype.fontsize</h5>

<h5>String.prototype.indexOf</h5>

<h5>String.prototype.italics</h5>

<h5>String.prototype.lastIndexOf</h5>

<h5>String.prototype.length</h5>

<h5>String.prototype.link</h5>

<h5>String.prototype.localeCompare</h5>

<h5>String.prototype.match</h5>

<h5>String.prototype.replace</h5>

<h5>String.prototype.search</h5>

<h5>String.prototype.slice</h5>

<h5>String.prototype.small</h5>

<h5>String.prototype.split</h5>

<h5>String.prototype.strike</h5>

<h5>String.prototype.sub</h5>

<h5>String.prototype.substr</h5>

<h5>String.prototype.substring</h5>

<h5>String.prototype.sup</h5>

<h5>String.prototype.toLocaleLowerCase</h5>

<h5>String.prototype.toLocaleUpperCase</h5>

<h5>String.prototype.toLowerCase</h5>

<h5>String.prototype.toUpperCase</h5>

<h5>String.prototype.trim</h5>

<h5>String.prototype.trimLeft</h5>

<h5>String.prototype.trimRight</h5>

<hr />

<h3>类型属性 和 对象属性</h3>

<h4>类型属性（包括类型方法）</h4>

<ul>
<li>做为Object类型的对象，js解释器内部提供了许多方法和属性。</li>
<li>通过 obj.xxx = xxx 的形式赋值的，也只能通过 obj.xxx 的形式使用。</li>
<li>这里的obj可以是Object,Function,Array,Date,RegExp,Boolean,String,Number中的任意一个</li>
</ul>


<h4>对象属性（包括对象方法）</h4>

<ul>
<li>做为Function类型的对象，所有通过<code>new 该对象</code>获得的对象都自动获得该对象的prototype属性中方法和属性。</li>
<li>类似 xxx = new obj() 获得的xxx对象，可以直接通过xxx.a的形式调用obj.prototype.a</li>
<li>这里的obj可以是Object,Function,Array,Date,RegExp,Boolean,String,Number中的任意一个</li>
<li>也可以是自定义的Function类型的对象</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解js数据类型]]></title>
    <link href="http://qindamoni.com/blog/2014/12/20/shen-ru-li-jie-jsshu-ju-lei-xing/"/>
    <updated>2014-12-20T13:42:36+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/20/shen-ru-li-jie-jsshu-ju-lei-xing</id>
    <content type="html"><![CDATA[<h3>变量与字面值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var name    = 'qindamoni';      // name 变量；'qindamoni' 字面值
</span><span class='line'>var age     = 10;               // age 变量；10 字面值</span></code></pre></td></tr></table></div></figure>


<h4>字面值</h4>

<p>内存中保存的一种数据结构，也就是具体的数值。</p>

<h4>变量</h4>

<p>保存字面值的内存位置，通过变量可以找到存储在该位置的数值。</p>

<ul>
<li>字面值单独出现没有任何意义（存储在内存中，又没有办法找到它）</li>
<li>字面值可以赋给某个变量</li>
<li>字面值可以出现在表达式中</li>
</ul>


<!--more-->


<h3>数据类型</h3>

<p>js中所有数值根据它的特征（存储，操作）可以分为6种类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kc">undefined</span>       <span class="c1">// Undefined</span>
</span><span class='line'><span class="kc">null</span>            <span class="c1">// Null</span>
</span><span class='line'><span class="kc">true</span>            <span class="c1">// Boolean</span>
</span><span class='line'><span class="mi">123</span>             <span class="c1">// Number</span>
</span><span class='line'><span class="s1">&#39;qindamoni&#39;</span>     <span class="c1">// String</span>
</span><span class='line'><span class="p">{</span><span class="s1">&#39;key&#39;</span><span class="o">:</span><span class="s1">&#39;value&#39;</span><span class="p">}</span> <span class="c1">// Object</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>数据类型说的即是字面值的类型，也是变量（拥有该字面值）的类型</li>
</ul>


<h3>基本数据类型</h3>

<p>Undefined，Null，Number，String 5个</p>

<ul>
<li>Undefined

<ul>
<li>只有一个值undefined</li>
<li>表示空的变量</li>
<li>下面5种情况生成Undefined类型的数据</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>   <span class="c1">// 直接赋值</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span><span class="p">;</span>               <span class="c1">// 定义后没有赋值</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>            <span class="c1">// 没有定义</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">(){</span>           <span class="c1">// 函数中return空</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">x</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">(){</span>           <span class="c1">// 函数中没有return</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">x</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Null

<ul>
<li>只有一个值null</li>
<li>表示空的Object，虽然Null表示的空Object，但是与Object类型有很多差别，所以单独属于一个类型。</li>
<li>只有下面1中情况生成Null类型的数据</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>        <span class="c1">// 直接赋值        </span>
</span><span class='line'>
</span><span class='line'><span class="k">typeof</span> <span class="kc">null</span> <span class="o">==</span> <span class="s1">&#39;object&#39;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Boolean

<ul>
<li>只有两个值true和false</li>
<li>表示<code>真</code>或<code>假</code>，用于各种条件判断</li>
<li>虽然只有两个值，但是js中所有其他类型都可以转换成Boolean类型，而且任何需要Boolean类型的地方都会自动进行这种转换。</li>
<li>下面情况会获得true值</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>           <span class="c1">// 直接赋值</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="mi">100</span><span class="p">){}</span>               <span class="c1">// 非 0 数字</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;qindamoni&#39;</span><span class="p">){}</span>       <span class="c1">// 非空字符串</span>
</span><span class='line'><span class="k">if</span><span class="p">({</span><span class="s1">&#39;key&#39;</span><span class="o">:</span><span class="s1">&#39;value&#39;</span><span class="p">}){}</span>   <span class="c1">// 所有Object类型</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 特别注意</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">){}</span>               <span class="c1">// &#39;0&#39; 是非空字符串所以是true</span>
</span><span class='line'><span class="k">if</span><span class="p">({}){}</span>                <span class="c1">// {} 是Object的字面值表达方式，也是true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>下面情况会获得false值</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>      <span class="c1">// 直接赋值</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">){}</span>             <span class="c1">// 数字 0</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">){}</span>            <span class="c1">// 空字符串</span>
</span><span class='line'><span class="k">if</span><span class="p">{</span><span class="kc">null</span><span class="p">}{}</span>          <span class="c1">// Null类型</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="kc">undefined</span><span class="p">){}</span>     <span class="c1">// Undefined类型</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Number

<ul>
<li>所有的数字都是Number类型

<ul>
<li>整数

<ul>
<li>十进制</li>
<li>8进制</li>
<li>16进制</li>
</ul>
</li>
<li>浮点数</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>      <span class="c1">// 十进制整数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mi">080</span><span class="p">;</span>     <span class="c1">// 8进制整数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>    <span class="c1">// 16进制整数</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mf">1.1</span><span class="p">;</span>     <span class="c1">// 浮点数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mf">1.1e1</span><span class="p">;</span>   <span class="c1">// 浮点数科学表示80</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String

<ul>
<li>所有<code>"</code>或<code>'</code>包裹的字符，两种方式没有任何区别。</li>
<li>有一些特殊的字符，使用转义序列表示</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;qindamoni&#39;</span><span class="p">;</span>     <span class="c1">// 普通字符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>            <span class="c1">// 换行符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\t&#39;</span><span class="p">;</span>            <span class="c1">// 制表符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\b&#39;</span><span class="p">;</span>            <span class="c1">// 空格</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\r&#39;</span><span class="p">;</span>            <span class="c1">// 回车</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\\&#39;</span><span class="p">;</span>            <span class="c1">// 斜杠</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\&#39;&#39;</span><span class="p">;</span>            <span class="c1">// 单引号</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\&quot;&#39;</span><span class="p">;</span>            <span class="c1">// 双引号</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\x41&#39;</span><span class="p">;</span>          <span class="c1">// 16进制字符代码，表示&#39;A&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\u0041&#39;</span>         <span class="c1">// 16进制unicode代码，表示&#39;A&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>复杂数据类型</h3>

<p>Object，虽然只有一个Object类型，但是相当的复杂</p>

<h4>注意：下面提到的复杂数据类型都可以理解成 面向对象语言中 类</h4>

<ul>
<li>Object类型的数据又称为对象。使用new操作符可以得一个Object类型的数据（对象）。</li>
<li>文章后面对 Object类型的数据 和 Object类型的对象 不做区分，都是一个意思。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">someFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">someProperty</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>js 解释器提供几个核心的Object类型的对象，用于表示一些特殊的数据类型。

<ul>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Function</li>
<li>基本数据类型的包装对象

<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
</ul>
</li>
</ul>
</li>
<li>其中最有意思的是Function类型，也是最特殊的类型。

<ul>
<li>Function类型是Object类型的对象，即通过<code>new Object()</code>生成的对象（在js解释器内部实现的）。</li>
<li>Function类型也是一个数据类型，所以通过<code>new Function</code>可以得到一个js函数对象，也叫做Function类型的对象。</li>
<li>文章后面对 Function类型的数据 和 Function类型的对象 和 函数 不做区分，都是一个意思

<ul>
<li>通过下面几种方式可以获得一个函数</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span><span class="s1">&#39;return num1 + num2&#39;</span><span class="p">);</span>    <span class="c1">// 最后一个参数是函数体，前面的参数是参数</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span><span class="nx">num2</span><span class="p">){</span>                                 <span class="c1">// 函数表达式法 </span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span><span class="nx">num2</span><span class="p">){</span>                                       <span class="c1">// 函数声明法</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>通过在变量后面加<code>()</code>就可以调用该函数变量。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>前面讲过，使用 <code>new Object()</code> 可以获得一个Object类型的对象。所以可以看到 <code>Object</code> 本身就是一个函数，即Function类型的对象。</li>
</ul>
</li>
<li><ul>
<li>结论：Function类型是Object类型的对象，同时Object类型又是Function类型的对象。谁大谁小？既然是平等的。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">;</span>     <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span> <span class="k">instanceof</span> <span class="nb">Function</span><span class="p">;</span>     <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Function</span> <span class="k">instanceof</span> <span class="nb">Function</span>    <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>同样的道理，Array，Date，RegExp，Boolean，Number，String 等内置的数据类型既是Object的对象，也是Function的对象。有种多重继承的感觉。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Array</span> <span class="k">instanceof</span> <span class="nb">Object</span>         <span class="c1">// true</span>
</span><span class='line'><span class="nb">Array</span> <span class="k">instanceof</span> <span class="nb">Function</span>       <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Date</span> <span class="k">instanceof</span> <span class="nb">Object</span>          <span class="c1">// true</span>
</span><span class='line'><span class="nb">Date</span> <span class="k">instanceof</span> <span class="nb">Function</span>        <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">RegExp</span> <span class="k">instanceof</span> <span class="nx">Objcet</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">RegExp</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Boolean</span> <span class="k">instanceof</span> <span class="nb">Object</span>       <span class="c1">// true</span>
</span><span class='line'><span class="nb">Boolean</span> <span class="k">instanceof</span> <span class="nb">Function</span>     <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Number</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">Number</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">String</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>所以这些数据类型即有Object类型的特性，也有Function类型的特性。并且Function 和 Object相互拥有彼的特性。</li>
</ul>
</li>
</ul>


<h4>Object 类型的对象特性（new 出来的Object对象）</h4>

<ul>
<li>使用<code>.</code>操作添加属性和方法</li>
<li>使用<code>.</code>操作调用对象的属性和方法</li>
<li>注意：new出来Object对象默认是没有任何属性的，只能先使用<code>.</code>操作符添加属性，之后在使用。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加属性和方法</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">param1</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用属性和方法</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">param1</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>obj = new Object() 也可以简写成 obj = {} 。两种写法是一个意思。</li>
</ul>


<h4>Function 类型的对象特性（new 出来的Function对象）</h4>

<ul>
<li>自动获得Function类型的prototype属性中的所有方法和属性，如同本身对象的属性和方法一样，所有new出来的对象之间共享这些属性和方法（即，修改一处，其他对象中的这些属性和方法都会变化）</li>
<li><code>new Function</code>出来的对象，本身也代表一类数据类型，所以可以继续<code>new 该对象</code>获得新的对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">k1</span> <span class="o">=</span> <span class="s1">&#39;v1&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">k1</span><span class="p">);</span>     <span class="c1">// &#39;v1&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">k2</span> <span class="o">=</span> <span class="s1">&#39;v2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">func2</span><span class="p">.</span><span class="nx">k2</span><span class="p">)</span>     <span class="c1">// &#39;v2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>关于new操作符</h4>

<ul>
<li>后面只能添加Function类型的对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>         <span class="c1">// Object 本身也是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>          <span class="c1">// 同上</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>       <span class="c1">// 同上</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>           <span class="c1">// 同上</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">a</span><span class="p">();</span>              <span class="c1">// 错误！a不是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">b</span><span class="p">();</span>              <span class="c1">// 错误！b不是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">c</span><span class="p">();</span>              <span class="c1">// 正确！c是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">d</span><span class="p">();</span>              <span class="c1">// 错误！d不是Function类型的对象</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果后面的Function类型的对象（即函数）有return语句，且return的还是Function类型的对象，那么最终new出来的是return的对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return 100&#39;</span><span class="p">);</span>     <span class="c1">// 等同于function a(){return 1}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里的obj跟return的1没有任何关系了。即没有任何途径通过obj得到100。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">o</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">p1</span>    <span class="o">=</span> <span class="s1">&#39;p1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">p2</span>    <span class="o">=</span> <span class="s1">&#39;p2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 同样的道理obj跟return的o没有任何关系了。o 不是Function类型的对象。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">p1</span><span class="p">);</span>      <span class="c1">// undefined;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">p2</span><span class="p">);</span>      <span class="c1">// undefined;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">p1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">p2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">f</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里obj的本质是f的对象，已经跟func没有任何关系了。即没有任何途径可以获得p1和p2。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>基本数据类型 和 基本数据类型包装类型</h3>

<p>每当对基本数据类型进行<code>.</code>操作符的时候，js解释器都会创建一个临时的对象，计算完成返回结果后就会销毁该对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;q.i.n&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(.);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解释器内部过程</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;q.i.n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">.</span><span class="nx">split</span><span class="p">(.);</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;qindamoni&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 临时创建String类型的tmp对象，将tmp.age = 10</span>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 收回临时创建的，销毁tmp对象</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// undefiend ，age是添加到tmp上面的，这里已经被销毁了</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown 语法]]></title>
    <link href="http://qindamoni.com/blog/2014/12/17/markdown-yu-fa/"/>
    <updated>2014-12-17T13:32:39+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/17/markdown-yu-fa</id>
    <content type="html"><![CDATA[<h3>段落</h3>

<p>整个Markdown文档由多个段落组成，段落之间使用<code>空行</code>分割。</p>

<ul>
<li><code>空行</code>只能包含<code>空格</code>，<code>制表符</code>或<code>空字符</code></li>
<li>多个<code>空行</code>会被当作一个<code>空行</code>处理</li>
<li>同一个段落内的多个<code>换行符</code>和多个<code>空格</code>都被当作一个<code>空格</code>处理</li>
</ul>


<!-- more -->


<figure class='code'><figcaption><span>源内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落1
</span><span class='line'>
</span><span class='line'>段落2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>段落3
</span><span class='line'>还是段落3
</span><span class='line'> 还是段落3
</span><span class='line'>    还是段落3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>显示效果</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落1
</span><span class='line'>段落2
</span><span class='line'>段落3 还是段落3 还是段落3 还是段落3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后格式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>段落1<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>段落2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>段落3 还是段落3 还是段落3 还是段落3<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建议每个段落之间做好使用明确的<code>空行</code>进行分割，尽管一些段落会自动换行</li>
</ul>


<figure class='code'><figcaption><span>源内容 标题段落会自动换行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># 标题段落
</span><span class='line'>内容段落
</span><span class='line'>
</span><span class='line'># 标题段落
</span><span class='line'>
</span><span class='line'>内容段落
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后格式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>标题段落<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>内容段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>标题段落<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>内容段落<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Markdown 的段落可以分为下面两大类

<ul>
<li>普通段落</li>
<li>特殊段落</li>
</ul>
</li>
</ul>


<h3>普通段落</h3>

<p>普通段落是开头不包含任何特殊标记的段落。Makrdown 会用<code>&lt;p&gt;</code>标签包裹普通段落。</p>

<figure class='code'><figcaption><span>源内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>普通段落
</span><span class='line'>
</span><span class='line'>普通段落
</span><span class='line'>
</span><span class='line'>普通段落
</span><span class='line'>普通段落
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>普通段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>普通段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>普通段落 普通段落<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>特殊段落</h3>

<ul>
<li>标题</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># H1
</span><span class='line'>
</span><span class='line'>## H2
</span><span class='line'>
</span><span class='line'>###### H6
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>引用</p></li>
<li><ul>
<li>标准格式</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 标准格式
</span><span class='line'>&gt; 标准格式
</span><span class='line'>&gt; 标准格式
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>简写</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 简写引用
</span><span class='line'>简写引用
</span><span class='line'>简写引用
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>嵌套</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 引用嵌套
</span><span class='line'>&gt;
</span><span class='line'>&gt;&gt; 引用嵌套
</span><span class='line'>&gt;
</span><span class='line'>&gt; 引用嵌套
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>列表</p></li>
<li><ul>
<li>无序列表</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>* 列表
</span><span class='line'>* 列表
</span><span class='line'>* 列表
</span><span class='line'>
</span><span class='line'>+ 列表
</span><span class='line'>+ 列表
</span><span class='line'>+ 列表
</span><span class='line'>
</span><span class='line'>- 列表
</span><span class='line'>- 列表
</span><span class='line'>- 列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>有序列表</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1.列表
</span><span class='line'>2.列表
</span><span class='line'>3.列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>列表嵌套</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>+ 列表
</span><span class='line'>    ＋列表
</span><span class='line'>
</span><span class='line'>- 列表
</span><span class='line'>    －列表
</span><span class='line'>
</span><span class='line'>* 列表
</span><span class='line'>    * 列表
</span><span class='line'>
</span><span class='line'>+ 列表
</span><span class='line'>    - 列表
</span><span class='line'>        * 列表
</span><span class='line'>    + 列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>代码</p></li>
<li><ul>
<li>缩进四个空格或一个制表符</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    代码
</span><span class='line'>    代码
</span><span class='line'>    代码
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>分割线</p></li>
<li><ul>
<li>三个以上下划线</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>___
</span><span class='line'>_ _ _
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>三个以上星号</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>****
</span><span class='line'>
</span><span class='line'>* * * * *
</span></code></pre></td></tr></table></div></figure>


<h3>段落内元素</h3>

<ul>
<li>连接</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>[文字](地址 鼠标经过显示)
</span><span class='line'>[qindamoni](http://qindamoni.com &quot;qindamoni&quot;)
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://qindamoni.com" title="qindamoni">qindamoni</a></p>

<ul>
<li><p>强调</p></li>
<li><ul>
<li>单个<code>星号</code> <code>下划线</code> 包裹，会转换成<code>em</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*强调*
</span><span class='line'>_强调_
</span></code></pre></td></tr></table></div></figure>


<p><em>强调</em></p>

<ul>
<li><ul>
<li>两个<code>星号</code> <code>下划线</code> 包裹，会装换成<code>strong</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>**强调**
</span><span class='line'>__强调__
</span></code></pre></td></tr></table></div></figure>


<p><strong>强调</strong></p>

<ul>
<li>代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落中使用一个`代码`包裹
</span><span class='line'>
</span><span class='line'>段落中使用两个`` ` ``包裹
</span></code></pre></td></tr></table></div></figure>


<p>段落中使用一个<code>代码</code>包裹</p>

<p>段落中使用两个<code>`</code>包裹</p>

<ul>
<li>图片</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>![alt text](/path/to/img.jpg)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
