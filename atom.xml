<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qindamoni]]></title>
  <link href="http://qindamoni.com/atom.xml" rel="self"/>
  <link href="http://qindamoni.com/"/>
  <updated>2015-02-07T08:44:03+08:00</updated>
  <id>http://qindamoni.com/</id>
  <author>
    <name><![CDATA[Qindamoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim技巧总结]]></title>
    <link href="http://qindamoni.com/blog/2015/01/13/vimji-qiao-zong-jie/"/>
    <updated>2015-01-13T00:05:40+08:00</updated>
    <id>http://qindamoni.com/blog/2015/01/13/vimji-qiao-zong-jie</id>
    <content type="html"><![CDATA[<ul>
<li>重复删除单个单词</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复删除单行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dd
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复缩进当前行及后面的行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;G
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>重复每个行后面添加;号</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A;&lt;Esc&gt;
</span><span class='line'>j
</span><span class='line'>.
</span><span class='line'>j
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接进入编辑模式的组合符号</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C = c$          // 当前位置删到行尾 
</span><span class='line'>s = cl          // 当前位置删除
</span><span class='line'>S = 0c          // 当前位置删到行首
</span><span class='line'>I = 0i          // 行首插入
</span><span class='line'>A = $a          // 行尾插入
</span><span class='line'>o = A&lt;Enter&gt;    // 下行插入
</span><span class='line'>O = ko          // 上行插入</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定+号两侧插入空格，可重复操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f+
</span><span class='line'>s + 
</span><span class='line'>;
</span><span class='line'>.
</span><span class='line'>;
</span><span class='line'>.
</span><span class='line'>;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重复与回滚</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>修改回滚            .   u
</span><span class='line'>行内查找    f+      ;   ,
</span><span class='line'>全文查找    /+      n   N
</span><span class='line'>全文查找    ?+      n   N
</span><span class='line'>替换回滚    :s/1/2  &   u</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查找指定单词并修改，可重复操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*               // 全文查找当前光标下的单词
</span><span class='line'>cw{abc}&lt;Esc&gt;
</span><span class='line'>n
</span><span class='line'>.
</span><span class='line'>n
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除单个单词delete a word，可重复</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>daw
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js Api 列表]]></title>
    <link href="http://qindamoni.com/blog/2014/12/20/js-api-lie-biao/"/>
    <updated>2014-12-20T13:45:21+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/20/js-api-lie-biao</id>
    <content type="html"><![CDATA[<h3>Object</h3>

<h4>类型属性</h4>

<h5>Object.create</h5>

<h5>Object.defineProperties</h5>

<h5>Object.defineProperty</h5>

<h5>Object.freeze</h5>

<h5>Object.getOwnPropertyDescriptor</h5>

<h5>Object.getOwnPropertyNames</h5>

<h5>Object.getPrototypeOf</h5>

<h5>Object.is</h5>

<h5>Object.isExtensible</h5>

<h5>Object.isFrozen</h5>

<h5>Object.isSealed</h5>

<h5>Object.keys</h5>

<h5>Object.preventExtensions</h5>

<h5>Object.prototype</h5>

<h5>Object.seal</h5>

<!--more-->


<h4>对象属性</h4>

<h5>Object.prototype.<strong>defineGetter</strong></h5>

<h5>Object.prototype.<strong>defineSetter</strong></h5>

<h5>Object.prototype.<strong>lookupGetter</strong></h5>

<h5>Object.prototype.<strong>lookupSetter</strong></h5>

<h5>Object.prototype.constructor</h5>

<h5>Object.prototype.hasOwnProperty</h5>

<h5>Object.prototype.isPrototypeOf</h5>

<h5>Object.prototype.propertyIsEnumerable</h5>

<h5>Object.prototype.toLocaleString</h5>

<h5>Object.prototype.toString</h5>

<h5>Object.prototype.valueOf</h5>

<hr />

<h3>Function</h3>

<h4>对象属性</h4>

<h5>Function.prototype.apply</h5>

<h5>Function.prototype.arguments</h5>

<h5>Function.prototype.bind</h5>

<h5>Function.prototype.call</h5>

<h5>Function.prototype.caller</h5>

<h5>Function.prototype.length</h5>

<h5>Function.prototype.name</h5>

<hr />

<h3>Array</h3>

<h4>类型属性</h4>

<h5>Array.isArray</h5>

<h4>对象属性，Array.prototype的属性</h4>

<h5>Array.prototype.concat</h5>

<h5>Array.prototype.every</h5>

<h5>Array.prototype.filter</h5>

<h5>Array.prototype.forEach</h5>

<h5>Array.prototype.indexOf</h5>

<h5>Array.prototype.join</h5>

<h5>Array.prototype.lastIndexOf</h5>

<h5>Array.prototype.length</h5>

<h5>Array.prototype.map</h5>

<h5>Array.prototype.pop</h5>

<h5>Array.prototype.push</h5>

<h5>Array.prototype.reduce</h5>

<h5>Array.prototype.reduceRight</h5>

<h5>Array.prototype.reverse</h5>

<h5>Array.prototype.shift</h5>

<h5>Array.prototype.slice</h5>

<h5>Array.prototype.some</h5>

<h5>Array.prototype.sort</h5>

<h5>Array.prototype.splice</h5>

<h5>Array.prototype.unshift</h5>

<hr />

<h3>Date</h3>

<h4>类型属性</h4>

<h5>Date.UTC</h5>

<h5>Date.now</h5>

<h5>Date.parse</h5>

<h4>对象属性，Date.prototype的属性</h4>

<h5>Date.prototype.getDate</h5>

<h5>Date.prototype.getDay</h5>

<h5>Date.prototype.getFullYear</h5>

<h5>Date.prototype.getHours</h5>

<h5>Date.prototype.getMilliseconds</h5>

<h5>Date.prototype.getMinutes</h5>

<h5>Date.prototype.getMonth</h5>

<h5>Date.prototype.getSeconds</h5>

<h5>Date.prototype.getTime</h5>

<h5>Date.prototype.getTimezoneOffset</h5>

<h5>Date.prototype.getUTCDate</h5>

<h5>Date.prototype.getUTCDay</h5>

<h5>Date.prototype.getUTCFullYear</h5>

<h5>Date.prototype.getUTCHours</h5>

<h5>Date.prototype.getUTCMilliseconds</h5>

<h5>Date.prototype.getUTCMinutes</h5>

<h5>Date.prototype.getUTCMonth</h5>

<h5>Date.prototype.getUTCSeconds</h5>

<h5>Date.prototype.getYear</h5>

<h5>Date.prototype.setDate</h5>

<h5>Date.prototype.setFullYear</h5>

<h5>Date.prototype.setHours</h5>

<h5>Date.prototype.setMilliseconds</h5>

<h5>Date.prototype.setMinutes</h5>

<h5>Date.prototype.setMonth</h5>

<h5>Date.prototype.setSeconds</h5>

<h5>Date.prototype.setTime</h5>

<h5>Date.prototype.setUTCDate</h5>

<h5>Date.prototype.setUTCFullYear</h5>

<h5>Date.prototype.setUTCHours</h5>

<h5>Date.prototype.setUTCMilliseconds</h5>

<h5>Date.prototype.setUTCMinutes</h5>

<h5>Date.prototype.setUTCMonth</h5>

<h5>Date.prototype.setUTCSeconds</h5>

<h5>Date.prototype.setYear</h5>

<h5>Date.prototype.toDateString</h5>

<h5>Date.prototype.toGMTString</h5>

<h5>Date.prototype.toISOString</h5>

<h5>Date.prototype.toJSON</h5>

<h5>Date.prototype.toLocaleDateString</h5>

<h5>Date.prototype.toLocaleTimeString</h5>

<h5>Date.prototype.toTimeString</h5>

<h5>Date.prototype.toUTCString</h5>

<hr />

<h3>Number</h3>

<h4>类型属性</h4>

<h5>Number.MAX_VALUE</h5>

<h5>Number.MIN_VALUE</h5>

<h5>Number.NEGATIVE_INFINITY</h5>

<h5>Number.NaN</h5>

<h5>Number.POSITIVE_INFINITY</h5>

<h5>Number.isFinite</h5>

<h5>Number.isNaN</h5>

<h5>Number.prototype</h5>

<h4>对象属性，Number.prototype</h4>

<h5>Number.prototype.toExponential</h5>

<h5>Number.prototype.toFixed</h5>

<h5>Number.prototype.toPrecision</h5>

<hr />

<h3>String</h3>

<h4>类型属性</h4>

<h5>String.fromCharCode</h5>

<h4>对象属性</h4>

<h5>String.prototype.anchor</h5>

<h5>String.prototype.big</h5>

<h5>String.prototype.blink</h5>

<h5>String.prototype.bold</h5>

<h5>String.prototype.charAt</h5>

<h5>String.prototype.charCodeAt</h5>

<h5>String.prototype.concat</h5>

<h5>String.prototype.fixed</h5>

<h5>String.prototype.fontcolor</h5>

<h5>String.prototype.fontsize</h5>

<h5>String.prototype.indexOf</h5>

<h5>String.prototype.italics</h5>

<h5>String.prototype.lastIndexOf</h5>

<h5>String.prototype.length</h5>

<h5>String.prototype.link</h5>

<h5>String.prototype.localeCompare</h5>

<h5>String.prototype.match</h5>

<h5>String.prototype.replace</h5>

<h5>String.prototype.search</h5>

<h5>String.prototype.slice</h5>

<h5>String.prototype.small</h5>

<h5>String.prototype.split</h5>

<h5>String.prototype.strike</h5>

<h5>String.prototype.sub</h5>

<h5>String.prototype.substr</h5>

<h5>String.prototype.substring</h5>

<h5>String.prototype.sup</h5>

<h5>String.prototype.toLocaleLowerCase</h5>

<h5>String.prototype.toLocaleUpperCase</h5>

<h5>String.prototype.toLowerCase</h5>

<h5>String.prototype.toUpperCase</h5>

<h5>String.prototype.trim</h5>

<h5>String.prototype.trimLeft</h5>

<h5>String.prototype.trimRight</h5>

<hr />

<h3>类型属性 和 对象属性</h3>

<h4>类型属性（包括类型方法）</h4>

<ul>
<li>做为Object类型的对象，js解释器内部提供了许多方法和属性。</li>
<li>通过 obj.xxx = xxx 的形式赋值的，也只能通过 obj.xxx 的形式使用。</li>
<li>这里的obj可以是Object,Function,Array,Date,RegExp,Boolean,String,Number中的任意一个</li>
</ul>


<h4>对象属性（包括对象方法）</h4>

<ul>
<li>做为Function类型的对象，所有通过<code>new 该对象</code>获得的对象都自动获得该对象的prototype属性中方法和属性。</li>
<li>类似 xxx = new obj() 获得的xxx对象，可以直接通过xxx.a的形式调用obj.prototype.a</li>
<li>这里的obj可以是Object,Function,Array,Date,RegExp,Boolean,String,Number中的任意一个</li>
<li>也可以是自定义的Function类型的对象</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解js数据类型]]></title>
    <link href="http://qindamoni.com/blog/2014/12/20/shen-ru-li-jie-jsshu-ju-lei-xing/"/>
    <updated>2014-12-20T13:42:36+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/20/shen-ru-li-jie-jsshu-ju-lei-xing</id>
    <content type="html"><![CDATA[<h3>变量与字面值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var name    = 'qindamoni';      // name 变量；'qindamoni' 字面值
</span><span class='line'>var age     = 10;               // age 变量；10 字面值</span></code></pre></td></tr></table></div></figure>


<h4>字面值</h4>

<p>内存中保存的一种数据结构，也就是具体的数值。</p>

<h4>变量</h4>

<p>保存字面值的内存位置，通过变量可以找到存储在该位置的数值。</p>

<ul>
<li>字面值单独出现没有任何意义（存储在内存中，又没有办法找到它）</li>
<li>字面值可以赋给某个变量</li>
<li>字面值可以出现在表达式中</li>
</ul>


<!--more-->


<h3>数据类型</h3>

<p>js中所有数值根据它的特征（存储，操作）可以分为6种类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kc">undefined</span>       <span class="c1">// Undefined</span>
</span><span class='line'><span class="kc">null</span>            <span class="c1">// Null</span>
</span><span class='line'><span class="kc">true</span>            <span class="c1">// Boolean</span>
</span><span class='line'><span class="mi">123</span>             <span class="c1">// Number</span>
</span><span class='line'><span class="s1">&#39;qindamoni&#39;</span>     <span class="c1">// String</span>
</span><span class='line'><span class="p">{</span><span class="s1">&#39;key&#39;</span><span class="o">:</span><span class="s1">&#39;value&#39;</span><span class="p">}</span> <span class="c1">// Object</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>数据类型说的即是字面值的类型，也是变量（拥有该字面值）的类型</li>
</ul>


<h3>基本数据类型</h3>

<p>Undefined，Null，Number，String 5个</p>

<ul>
<li>Undefined

<ul>
<li>只有一个值undefined</li>
<li>表示空的变量</li>
<li>下面5种情况生成Undefined类型的数据</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>   <span class="c1">// 直接赋值</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span><span class="p">;</span>               <span class="c1">// 定义后没有赋值</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>            <span class="c1">// 没有定义</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">(){</span>           <span class="c1">// 函数中return空</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">x</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">(){</span>           <span class="c1">// 函数中没有return</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">x</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Null

<ul>
<li>只有一个值null</li>
<li>表示空的Object，虽然Null表示的空Object，但是与Object类型有很多差别，所以单独属于一个类型。</li>
<li>只有下面1中情况生成Null类型的数据</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>        <span class="c1">// 直接赋值        </span>
</span><span class='line'>
</span><span class='line'><span class="k">typeof</span> <span class="kc">null</span> <span class="o">==</span> <span class="s1">&#39;object&#39;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Boolean

<ul>
<li>只有两个值true和false</li>
<li>表示<code>真</code>或<code>假</code>，用于各种条件判断</li>
<li>虽然只有两个值，但是js中所有其他类型都可以转换成Boolean类型，而且任何需要Boolean类型的地方都会自动进行这种转换。</li>
<li>下面情况会获得true值</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>           <span class="c1">// 直接赋值</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="mi">100</span><span class="p">){}</span>               <span class="c1">// 非 0 数字</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;qindamoni&#39;</span><span class="p">){}</span>       <span class="c1">// 非空字符串</span>
</span><span class='line'><span class="k">if</span><span class="p">({</span><span class="s1">&#39;key&#39;</span><span class="o">:</span><span class="s1">&#39;value&#39;</span><span class="p">}){}</span>   <span class="c1">// 所有Object类型</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 特别注意</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">){}</span>               <span class="c1">// &#39;0&#39; 是非空字符串所以是true</span>
</span><span class='line'><span class="k">if</span><span class="p">({}){}</span>                <span class="c1">// {} 是Object的字面值表达方式，也是true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>下面情况会获得false值</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>      <span class="c1">// 直接赋值</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">){}</span>             <span class="c1">// 数字 0</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">){}</span>            <span class="c1">// 空字符串</span>
</span><span class='line'><span class="k">if</span><span class="p">{</span><span class="kc">null</span><span class="p">}{}</span>          <span class="c1">// Null类型</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="kc">undefined</span><span class="p">){}</span>     <span class="c1">// Undefined类型</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Number

<ul>
<li>所有的数字都是Number类型

<ul>
<li>整数

<ul>
<li>十进制</li>
<li>8进制</li>
<li>16进制</li>
</ul>
</li>
<li>浮点数</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>      <span class="c1">// 十进制整数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mi">080</span><span class="p">;</span>     <span class="c1">// 8进制整数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>    <span class="c1">// 16进制整数</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mf">1.1</span><span class="p">;</span>     <span class="c1">// 浮点数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="mf">1.1e1</span><span class="p">;</span>   <span class="c1">// 浮点数科学表示80</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String

<ul>
<li>所有<code>"</code>或<code>'</code>包裹的字符，两种方式没有任何区别。</li>
<li>有一些特殊的字符，使用转义序列表示</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;qindamoni&#39;</span><span class="p">;</span>     <span class="c1">// 普通字符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>            <span class="c1">// 换行符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\t&#39;</span><span class="p">;</span>            <span class="c1">// 制表符</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\b&#39;</span><span class="p">;</span>            <span class="c1">// 空格</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\r&#39;</span><span class="p">;</span>            <span class="c1">// 回车</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\\&#39;</span><span class="p">;</span>            <span class="c1">// 斜杠</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\&#39;&#39;</span><span class="p">;</span>            <span class="c1">// 单引号</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\&quot;&#39;</span><span class="p">;</span>            <span class="c1">// 双引号</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\x41&#39;</span><span class="p">;</span>          <span class="c1">// 16进制字符代码，表示&#39;A&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;\u0041&#39;</span>         <span class="c1">// 16进制unicode代码，表示&#39;A&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>复杂数据类型</h3>

<p>Object，虽然只有一个Object类型，但是相当的复杂</p>

<ul>
<li>Object类型的数据又称为对象。使用new操作符可以得一个Object类型的数据（对象）。</li>
<li>文章后面对 Object类型的数据 和 Object类型的对象 不做区分，都是一个意思。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">someFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">someProperty</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>js 解释器提供几个核心的Object类型的对象，用于表示一些特殊的数据类型。

<ul>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Function</li>
<li>基本数据类型的包装对象

<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
</ul>
</li>
</ul>
</li>
<li>其中最有意思的是Function类型，也是最特殊的类型。

<ul>
<li>Function类型是Object类型的对象，即通过<code>new Object()</code>生成的对象（在js解释器内部实现的）。</li>
<li>Function类型也是一个数据类型，所以通过<code>new Function</code>可以得到一个js函数对象，也叫做Function类型的对象。</li>
<li>文章后面对 Function类型的数据 和 Function类型的对象 和 函数 不做区分，都是一个意思

<ul>
<li>通过下面几种方式可以获得一个函数</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span><span class="s1">&#39;return num1 + num2&#39;</span><span class="p">);</span>    <span class="c1">// 最后一个参数是函数体，前面的参数是参数</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span><span class="nx">num2</span><span class="p">){</span>                                 <span class="c1">// 函数表达式法 </span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span><span class="nx">num2</span><span class="p">){</span>                                       <span class="c1">// 函数声明法</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>通过在变量后面加<code>()</code>就可以调用该函数变量。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>前面讲过，使用 <code>new Object()</code> 可以获得一个Object类型的对象。所以可以看到 <code>Object</code> 本身就是一个函数，即Function类型的对象。</li>
</ul>
</li>
<li><ul>
<li>结论：Function类型是Object类型的对象，同时Object类型又是Function类型的对象。谁大谁小？既然是平等的。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">;</span>     <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span> <span class="k">instanceof</span> <span class="nb">Function</span><span class="p">;</span>     <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Function</span> <span class="k">instanceof</span> <span class="nb">Function</span>    <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>同样的道理，Array，Date，RegExp，Boolean，Number，String 等内置的数据类型既是Object的对象，也是Function的对象。有种多重继承的感觉。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Array</span> <span class="k">instanceof</span> <span class="nb">Object</span>         <span class="c1">// true</span>
</span><span class='line'><span class="nb">Array</span> <span class="k">instanceof</span> <span class="nb">Function</span>       <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Date</span> <span class="k">instanceof</span> <span class="nb">Object</span>          <span class="c1">// true</span>
</span><span class='line'><span class="nb">Date</span> <span class="k">instanceof</span> <span class="nb">Function</span>        <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">RegExp</span> <span class="k">instanceof</span> <span class="nx">Objcet</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">RegExp</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Boolean</span> <span class="k">instanceof</span> <span class="nb">Object</span>       <span class="c1">// true</span>
</span><span class='line'><span class="nb">Boolean</span> <span class="k">instanceof</span> <span class="nb">Function</span>     <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Number</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">Number</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span> <span class="k">instanceof</span> <span class="nb">Object</span>        <span class="c1">// true</span>
</span><span class='line'><span class="nb">String</span> <span class="k">instanceof</span> <span class="nb">Function</span>      <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>所以这些数据类型即有Object类型的特性，也有Function类型的特性。并且Function 和 Object相互拥有彼的特性。</li>
</ul>
</li>
</ul>


<h4>Object 类型的对象特性（new 出来的Object对象）</h4>

<ul>
<li>使用<code>.</code>操作添加属性和方法</li>
<li>使用<code>.</code>操作调用对象的属性和方法</li>
<li>注意：new出来Object对象默认是没有任何属性的，只能先使用<code>.</code>操作符添加属性，之后在使用。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加属性和方法</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">param1</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用属性和方法</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">param1</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function 类型的对象特性（new 出来的Function对象）</h4>

<ul>
<li>自动获得Function类型的prototype属性中的所有方法和属性，如同本身对象的属性和方法一样，所有new出来的对象之间共享这些属性和方法（即，修改一处，其他对象中的这些属性和方法都会变化）</li>
<li><code>new Function</code>出来的对象，本身也代表一类数据类型，所以可以继续<code>new 该对象</code>获得新的对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">k1</span> <span class="o">=</span> <span class="s1">&#39;v1&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">k1</span><span class="p">);</span>     <span class="c1">// &#39;v1&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">k2</span> <span class="o">=</span> <span class="s1">&#39;v2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">func2</span><span class="p">.</span><span class="nx">k2</span><span class="p">)</span>     <span class="c1">// &#39;v2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>关于new操作符</h4>

<ul>
<li>后面只能添加Function类型的对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>         <span class="c1">// Object 本身也是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>          <span class="c1">// 同上</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>       <span class="c1">// 同上</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>           <span class="c1">// 同上</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">a</span><span class="p">();</span>              <span class="c1">// 错误！a不是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">b</span><span class="p">();</span>              <span class="c1">// 错误！b不是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">c</span><span class="p">();</span>              <span class="c1">// 正确！c是Function类型的对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d1</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">d</span><span class="p">();</span>              <span class="c1">// 错误！d不是Function类型的对象</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果后面的Function类型的对象（即函数）有return语句，且return的还是Function类型的对象，那么最终new出来的是return的对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return 100&#39;</span><span class="p">);</span>     <span class="c1">// 等同于function a(){return 1}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里的obj跟return的1没有任何关系了。即没有任何途径通过obj得到100。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">o</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">p1</span>    <span class="o">=</span> <span class="s1">&#39;p1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">p2</span>    <span class="o">=</span> <span class="s1">&#39;p2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 同样的道理obj跟return的o没有任何关系了。o 不是Function类型的对象。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">p1</span><span class="p">);</span>      <span class="c1">// undefined;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">p2</span><span class="p">);</span>      <span class="c1">// undefined;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">p1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">p2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">f</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里obj的本质是f的对象，已经跟func没有任何关系了。即没有任何途径可以获得p1和p2。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>基本数据类型 和 基本数据类型包装类型</h3>

<p>每当对基本数据类型进行<code>.</code>操作符的时候，js解释器都会创建一个临时的对象，计算完成返回结果后就会销毁该对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;q.i.n&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(.);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解释器内部过程</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;q.i.n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">.</span><span class="nx">split</span><span class="p">(.);</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;qindamoni&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 临时创建String类型的tmp对象，将tmp.age = 10</span>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 收回临时创建的，销毁tmp对象</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// undefiend ，age是添加到tmp上面的，这里已经被销毁了</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown 语法]]></title>
    <link href="http://qindamoni.com/blog/2014/12/17/markdown-yu-fa/"/>
    <updated>2014-12-17T13:32:39+08:00</updated>
    <id>http://qindamoni.com/blog/2014/12/17/markdown-yu-fa</id>
    <content type="html"><![CDATA[<h3>段落</h3>

<p>整个Markdown文档由多个段落组成，段落之间使用<code>空行</code>分割。</p>

<ul>
<li><code>空行</code>只能包含<code>空格</code>，<code>制表符</code>或<code>空字符</code></li>
<li>多个<code>空行</code>会被当作一个<code>空行</code>处理</li>
<li>同一个段落内的多个<code>换行符</code>和多个<code>空格</code>都被当作一个<code>空格</code>处理</li>
</ul>


<!-- more -->


<figure class='code'><figcaption><span>源内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落1
</span><span class='line'>
</span><span class='line'>段落2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>段落3
</span><span class='line'>还是段落3
</span><span class='line'> 还是段落3
</span><span class='line'>    还是段落3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>显示效果</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落1
</span><span class='line'>段落2
</span><span class='line'>段落3 还是段落3 还是段落3 还是段落3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后格式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>段落1<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>段落2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>段落3 还是段落3 还是段落3 还是段落3<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建议每个段落之间做好使用明确的<code>空行</code>进行分割，尽管一些段落会自动换行</li>
</ul>


<figure class='code'><figcaption><span>源内容 标题段落会自动换行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># 标题段落
</span><span class='line'>内容段落
</span><span class='line'>
</span><span class='line'># 标题段落
</span><span class='line'>
</span><span class='line'>内容段落
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后格式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>标题段落<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>内容段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>标题段落<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>内容段落<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Markdown 的段落可以分为下面两大类

<ul>
<li>普通段落</li>
<li>特殊段落</li>
</ul>
</li>
</ul>


<h3>普通段落</h3>

<p>普通段落是开头不包含任何特殊标记的段落。Makrdown 会用<code>&lt;p&gt;</code>标签包裹普通段落。</p>

<figure class='code'><figcaption><span>源内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>普通段落
</span><span class='line'>
</span><span class='line'>普通段落
</span><span class='line'>
</span><span class='line'>普通段落
</span><span class='line'>普通段落
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>转换后内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>普通段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>普通段落<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>普通段落 普通段落<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>特殊段落</h3>

<ul>
<li>标题</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># H1
</span><span class='line'>
</span><span class='line'>## H2
</span><span class='line'>
</span><span class='line'>###### H6
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>引用</p></li>
<li><ul>
<li>标准格式</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 标准格式
</span><span class='line'>&gt; 标准格式
</span><span class='line'>&gt; 标准格式
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>简写</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 简写引用
</span><span class='line'>简写引用
</span><span class='line'>简写引用
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>嵌套</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt; 引用嵌套
</span><span class='line'>&gt;
</span><span class='line'>&gt;&gt; 引用嵌套
</span><span class='line'>&gt;
</span><span class='line'>&gt; 引用嵌套
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>列表</p></li>
<li><ul>
<li>无序列表</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>* 列表
</span><span class='line'>* 列表
</span><span class='line'>* 列表
</span><span class='line'>
</span><span class='line'>+ 列表
</span><span class='line'>+ 列表
</span><span class='line'>+ 列表
</span><span class='line'>
</span><span class='line'>- 列表
</span><span class='line'>- 列表
</span><span class='line'>- 列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>有序列表</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>1.列表
</span><span class='line'>2.列表
</span><span class='line'>3.列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>列表嵌套</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>+ 列表
</span><span class='line'>    ＋列表
</span><span class='line'>
</span><span class='line'>- 列表
</span><span class='line'>    －列表
</span><span class='line'>
</span><span class='line'>* 列表
</span><span class='line'>    * 列表
</span><span class='line'>
</span><span class='line'>+ 列表
</span><span class='line'>    - 列表
</span><span class='line'>        * 列表
</span><span class='line'>    + 列表
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>代码</p></li>
<li><ul>
<li>缩进四个空格或一个制表符</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    代码
</span><span class='line'>    代码
</span><span class='line'>    代码
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>分割线</p></li>
<li><ul>
<li>三个以上下划线</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>___
</span><span class='line'>_ _ _
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>三个以上星号</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>****
</span><span class='line'>
</span><span class='line'>* * * * *
</span></code></pre></td></tr></table></div></figure>


<h3>段落内元素</h3>

<ul>
<li>连接</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>[文字](地址 鼠标经过显示)
</span><span class='line'>[qindamoni](http://qindamoni.com &quot;qindamoni&quot;)
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://qindamoni.com" title="qindamoni">qindamoni</a></p>

<ul>
<li><p>强调</p></li>
<li><ul>
<li>单个<code>星号</code> <code>下划线</code> 包裹，会转换成<code>em</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>*强调*
</span><span class='line'>_强调_
</span></code></pre></td></tr></table></div></figure>


<p><em>强调</em></p>

<ul>
<li><ul>
<li>两个<code>星号</code> <code>下划线</code> 包裹，会装换成<code>strong</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>**强调**
</span><span class='line'>__强调__
</span></code></pre></td></tr></table></div></figure>


<p><strong>强调</strong></p>

<ul>
<li>代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>段落中使用一个`代码`包裹
</span><span class='line'>
</span><span class='line'>段落中使用两个`` ` ``包裹
</span></code></pre></td></tr></table></div></figure>


<p>段落中使用一个<code>代码</code>包裹</p>

<p>段落中使用两个<code>`</code>包裹</p>

<ul>
<li>图片</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>![alt text](/path/to/img.jpg)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
